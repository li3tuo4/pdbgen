// Copyright (C) 2011 ASIP Solutions, Inc. All rights reserved. 
// Generated by ASIP Meister 2.3 on 2014/09/19 21:18:25 
Design{
Version{"2.3"},

Abstract_level_architecture{
Fhm_workname{"FHM_work"},
Priority{"Performance"},
CPU_type{"Pipeline"},
Pipeline_architecture{Number_of_stages{"6"},
Number_of_common_stages{"0"},
stage{stage1{"IF,1,fetch"},
stage2{"ID,1,decode & register_read"},
stage3{"EX,1,register_read & exec"},
stage4{"MEM1,1,memory_read & memory_write"},
stage5{"MEM2,1,memory_read & memory_write"},
stage6{"WB,1,register_write"}},
Multi_cycle_interlock{"Yes"},
Data_hazard_interlock{"No"},
Register_bypass{"No"},
Delayed_branch{"No"}},
MAX_instruction_bit_width{"64"},
MAX_data_width{"32"},
Processor_design{"New Design"},
Use_compiler{"No"}},

Port_declaration{
entity_name{"ssCPU_2_3_0"},Port{"CLK"{direction{"in"},signal_type{"1"},signal_attribute{"clock"}},
"Reset"{direction{"in"},signal_type{"1"},signal_attribute{"reset"}},
"imaddr"{direction{"out"},signal_type{"32"},signal_attribute{"instruction_memory_address_bus"}},
"imdat_in"{direction{"in"},signal_type{"64"},signal_attribute{"instruction_memory_data_in_bus"}},
"imdat_out"{direction{"out"},signal_type{"64"},signal_attribute{"instruction_memory_data_out_bus"}},
"imrw"{direction{"out"},signal_type{"1"},signal_attribute{"instruction_memory_rw_bus"}},
"imaddr_err"{direction{"in"},signal_type{"1"},signal_attribute{"instruction_memory_address_error_bus"}},
"DataAB"{direction{"out"},signal_type{"32"},signal_attribute{"data_memory_address_bus"}},
"DataDIB"{direction{"in"},signal_type{"32"},signal_attribute{"data_memory_data_in_bus"}},
"DataDOB"{direction{"out"},signal_type{"32"},signal_attribute{"data_memory_data_out_bus"}},
"DataReq"{direction{"out"},signal_type{"1"},signal_attribute{"data_memory_request_bus"}},
"DataAck"{direction{"in"},signal_type{"1"},signal_attribute{"data_memory_acknowledge_bus"}},
"DataRW"{direction{"out"},signal_type{"1"},signal_attribute{"data_memory_rw_bus"}},
"DataMode"{direction{"out"},signal_type{"2"},signal_attribute{"data_memory_write_mode_bus"}},
"DataExt"{direction{"out"},signal_type{"1"},signal_attribute{"data_memory_ext_mode_bus"}},
"DataAdrerr"{direction{"in"},signal_type{"1"},signal_attribute{"data_memory_address_error_bus"}},
"DataCancel"{direction{"out"},signal_type{"1"},signal_attribute{"data_memory_cancel_bus"}}
}},

Instruction_type{
sub_field_name{NO_VLIW{width{"63","0"},type{"R"{
"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"name"{"opcode"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
}
,"I"{
"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"name"{"opcode"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
}
,"J"{
"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"name"{"opcode"},width{"47","32"}},
"Reserved"{"binary"{"000000"},width{"31","26"}},
"Operand"{"name"{"targ"},width{"25","0"}}
}
,"INH"{
"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"name"{"opcode"},width{"47","32"}},
"Reserved"{"binary"{"00000000000000000000000000000000"},width{"31","0"}}
}
}}}},

Instruction{NO_VLIW{"LB"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000100000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"LBU"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000100010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"LH"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000100100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"LHU"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000100110"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"LW"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000101000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"DLW"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000101001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"LWL"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000101100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"LWR"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000101101"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"SB"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000110000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"SH"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000110010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"SW"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000110100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"DSW"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000110101"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"DSZ"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000111000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"SWL"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000111001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"SWR"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000111010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"LB_RR"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000011000000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"LBU_RR"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000011000001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"LH_RR"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000011000010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"LHU_RR"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000011000011"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"LW_RR"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000011000100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"DLW_RR"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000011001110"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SB_RR"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000011000110"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SH_RR"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000011000111"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SW_RR"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000011001000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"DSW_RR"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000011010000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"DSZ_RR"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000011010001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"JUMP"{type{"J"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000000001"},width{"47","32"}},
"Reserved"{"binary"{"000000"},width{"31","26"}},
"Operand"{"name"{"targ"},width{"25","0"}}
},"JAL"{type{"J"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000000010"},width{"47","32"}},
"Reserved"{"binary"{"000000"},width{"31","26"}},
"Operand"{"name"{"targ"},width{"25","0"}}
},"JR"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000000011"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"JALR"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000000100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"BEQ"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000000101"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"BNE"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000000110"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"BLEZ"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000000111"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"BGTZ"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000001000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"BLTZ"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000001001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"BGEZ"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000001010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"ADD"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001000000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"ADDI"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001000001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"ADDU"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001000010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"ADDIU"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001000011"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"SUB"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001000100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SUBU"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001000101"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"MULT"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001000110"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"MULTU"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001000111"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"DIV"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001001000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"DIVU"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001001001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"MFHI"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001001010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"MTHI"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001001011"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"MFLO"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001001100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"MTLO"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001001101"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"AND"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001001110"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"ANDI"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001001111"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"OR"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001010000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"ORI"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001010001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"XOR"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001010010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"XORI"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001010011"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"NOR"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001010100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SLL"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001010101"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SLLV"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001010110"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SRL"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001010111"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SRLV"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001011000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SRA"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001011001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SRAV"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001011010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SLT"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001011011"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SLTI"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001011100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"SLTU"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001011101"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SLTIU"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000001011110"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"NOP"{type{"INH"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000000000000"},width{"47","32"}},
"Reserved"{"binary"{"00000000000000000000000000000000"},width{"31","0"}}
},"LUI"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000010100010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"SYSCALL"{type{"INH"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000010100000"},width{"47","32"}},
"Reserved"{"binary"{"00000000000000000000000000000000"},width{"31","0"}}
},"BREAK"{type{"INH"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000010100001"},width{"47","32"}},
"Reserved"{"binary"{"00000000000000000000000000000000"},width{"31","0"}}
},"SYSRET"{type{"INH"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0000000011111111"},width{"47","32"}},
"Reserved"{"binary"{"00000000000000000000000000000000"},width{"31","0"}}
},"LBm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000100000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"LBUm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000100010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"LHm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000100100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"LHUm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000100110"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"LWm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000101000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"DLWm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000101001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"LWLm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000101100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"LWRm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000101101"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"SBm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000110000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"SHm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000110010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"SWm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000110100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"DSWm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000110101"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"DSZm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000111000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"SWLm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000111001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"SWRm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000111010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"LB_RRm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000011000000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"LBU_RRm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000011000001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"LH_RRm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000011000010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"LHU_RRm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000011000011"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"LW_RRm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000011000100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"DLW_RRm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000011001110"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SB_RRm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000011000110"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SH_RRm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000011000111"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SW_RRm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000011001000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"DSW_RRm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000011010000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"DSZ_RRm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000011010001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"JUMPm"{type{"J"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000000001"},width{"47","32"}},
"Reserved"{"binary"{"000000"},width{"31","26"}},
"Operand"{"name"{"targ"},width{"25","0"}}
},"JALm"{type{"J"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000000010"},width{"47","32"}},
"Reserved"{"binary"{"000000"},width{"31","26"}},
"Operand"{"name"{"targ"},width{"25","0"}}
},"JRm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000000011"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"JALRm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000000100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"BEQm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000000101"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"BNEm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000000110"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"BLEZm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000000111"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"BGTZm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000001000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"BLTZm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000001001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"BGEZm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000000001010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"ADDm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001000000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"ADDIm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001000001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"ADDUm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001000010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"ADDIUm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001000011"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"SUBm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001000100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SUBUm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001000101"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"MULTm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001000110"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"MULTUm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001000111"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"DIVm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001001000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"DIVUm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001001001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"MFHIm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001001010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"MTHIm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001001011"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"MFLOm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001001100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"MTLOm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001001101"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"ANDm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001001110"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"ANDIm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001001111"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"ORm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001010000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"ORIm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001010001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"XORm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001010010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"XORIm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001010011"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"NORm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001010100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SLLm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001010101"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SLLVm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001010110"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SRLm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001010111"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SRLVm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001011000"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SRAm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001011001"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SRAVm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001011010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SLTm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001011011"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SLTUm"{type{"R"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001011101"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Reserved"{"binary"{"000"},width{"15","13"}},
"Operand"{"name"{"rd"},width{"12","8"}},
"Operand"{"name"{"shamt"},width{"7","0"}}
},"SLTIUm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001011110"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"LUIm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000010100010"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
},"SLTIm"{type{"I"},"Reserved"{"binary"{"0000000000000000"},width{"63","48"}},
"OP-code"{"binary"{"0101000001011100"},width{"47","32"}},
"Reserved"{"binary"{"000"},width{"31","29"}},
"Operand"{"name"{"rs"},width{"28","24"}},
"Reserved"{"binary"{"000"},width{"23","21"}},
"Operand"{"name"{"rt"},width{"20","16"}},
"Operand"{"name"{"imm"},width{"15","0"}}
}}},

Operation{NO_VLIW{}},

Resource{"ALU1"{class{"alu"},classpath{"/basicfhmdb/computational/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
algorithm{"default"}}}
,"ADD1"{class{"adder"},classpath{"/basicfhmdb/computational/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
algorithm{"default"}}}
,"DIV1"{class{"divider"},classpath{"/basicfhmdb/computational/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
algorithm{"array"},
adder_algorithm{"default"},
data_type{"two_complement"}}}
,"EXT1"{class{"extender"},classpath{"/basicfhmdb/computational/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"16"},
bit_width_out{"32"}}}
,"MUL1"{class{"multiplier"},classpath{"/basicfhmdb/computational/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
algorithm{"array"},
adder_algorithm{"default"},
data_type{"two_complement"}}}
,"HI"{class{"register"},classpath{"/basicfhmdb/storage/"},use{"Plain Register"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"}}}
,"LO"{class{"register"},classpath{"/basicfhmdb/storage/"},use{"Plain Register"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"}}}
,"GPR"{class{"registerfile"},classpath{"/basicfhmdb/storage/"},use{"Register File"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
num_register{"32"},
num_read_port{"4"},
num_write_port{"2"}}}
,"IReg"{class{"register"},classpath{"/basicfhmdb/storage/"},use{"Inst. Register"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"64"}}}
,"Dmem"{class{"mifu"},classpath{"/workdb/FHM_work/"},use{"Data Memory"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
address_space{"32"},
access_width{"8"},
access_mode{"multi_cycle"},
type{"read_write"}}}
,"CPC"{class{"pcu"},classpath{"/workdb/FHM_work/"},use{"Prog. Counter"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
increment_step{"8"},
adder_algorithm{"default"}}}
,"SFT1"{class{"shifter"},classpath{"/basicfhmdb/computational/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
amount{"variable"}}}
,"SYSREG"{class{"register"},classpath{"/basicfhmdb/storage/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"}}}
,"FWU0"{class{"fwu"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
addr_width{"5"},
stage_number{"8"}}}
,"FWU1"{class{"fwu"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
addr_width{"5"},
stage_number{"8"}}}
,"FWU2"{class{"fwu"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
addr_width{"5"},
stage_number{"8"}}}
,"FWU3"{class{"fwu"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
addr_width{"5"},
stage_number{"8"}}}
,"ADDER2"{class{"adder"},classpath{"/basicfhmdb/computational/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
algorithm{"default"}}}
,"Imem"{class{"mifu"},classpath{"/workdb/FHM_work/"},use{"Inst. Memory"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"64"},
address_space{"32"},
access_width{"64"},
access_mode{"single_cycle"},
type{"read_write"}}}
,"FWU4"{class{"fwu"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
addr_width{"5"},
stage_number{"8"}}}
,"FWUL0"{class{"fwu_lock"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
addr_width{"5"},
stage_number{"8"},
lockstage_number{"6"}}}
,"FWUL1"{class{"fwu_lock"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
addr_width{"5"},
stage_number{"8"},
lockstage_number{"6"}}}
,"FWUL2"{class{"fwu_lock"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
addr_width{"5"},
stage_number{"8"},
lockstage_number{"6"}}}
,"FWUL3"{class{"fwu_lock"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
addr_width{"5"},
stage_number{"8"},
lockstage_number{"6"}}}
,"MUXw32p4"{class{"multiplexor"},classpath{"/basicfhmdb/computational/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"},
number_of_ports{"4"}}}
,"CTRLWIRE_FORMA_EX0"{class{"wire_in"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"1"}}}
,"CYCLEWIRE_FORMA_EX"{class{"wire_in"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"}}}
,"CYCLEWIRE_FORMA_ID"{class{"wire_in"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"}}}
,"CYCLEWIRE_FORMA_M1"{class{"wire_in"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"}}}
,"CYCLEWIRE_FORMA_M2"{class{"wire_in"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"}}}
,"CYCLEWIRE_FORMA_WB"{class{"wire_in"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"32"}}}
,"CTRLWIRE_FORMA_EX1"{class{"wire_in"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"1"}}}
,"CTRLWIRE_FORMA_EX2"{class{"wire_in"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"1"}}}
,"CTRLWIRE_FORMA_M10"{class{"wire_in"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"1"}}}
,"CTRLWIRE_FORMA_M11"{class{"wire_in"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"1"}}}
,"CTRLWIRE_FORMA_M12"{class{"wire_in"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"1"}}}
,"CTRLWIRE_FORMA_M20"{class{"wire_in"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"1"}}}
,"CTRLWIRE_FORMA_M21"{class{"wire_in"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"1"}}}
,"CTRLWIRE_FORMA_M22"{class{"wire_in"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"1"}}}
,"CTRLWIRE_FORMA_M23"{class{"wire_in"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"1"}}}
,"DATAOUT_FORMA_EX0"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_EX1"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_EX2"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_M10"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_M11"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_M12"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_M13"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_M20"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_M21"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_M22"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_M23"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_WB0"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_ID0"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_ID1"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_WB1"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_M24"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_ID2"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
,"DATAOUT_FORMA_ID3"{class{"wire_out"},classpath{"/workdb/FHM_work/"},use{"(unspecified)"},
parameter{
abstraction_level{for_simulation{"Behavior"},for_synthesis{"Gate"}},
bit_width{"136"},
default_output{"fix_to_0"}}}
},

Exception{"reset"{
Mask{Maskable{"NO"},Register_Name{""},Position{""},Register_Value{""}},
Condition{Internal_Condition{""},"Reset"{Active_Value{"1"}}},
Type{"Reset"},
Cycles{""},
Behavior{""},
Assert{""},
Comment{""},
MOD{variable{""},clk(1){"null = IReg.reset();
null = CPC.reset();
null = GPR.reset();"}
}}
},

MOT{mnemonic{"LB"{variable{"wire[31:0] source0;
wire[31:0] source1;
wire[31:0] addr;
wire[31:0] bigE_word;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire[31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);"},
clk(3){"wire[3:0] flag;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire addr_err;
wire[31:0] result;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

<result,addr_err> = Dmem.ld_8(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3, byte2, byte1, byte0>;
/*bigE_word is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by bigE_word
after this convert. -- Tuo*/
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);"},
clk(6){"null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);"}
}
,"LBU"{variable{"wire[31:0] source0;
wire[31:0] source1;
wire[31:0] addr;
wire[31:0] bigE_word;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire[31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);"},
clk(3){"wire[3:0] flag;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire addr_err;
wire[31:0] result;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

<result,addr_err> = Dmem.ldu_8(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3, byte2, byte1, byte0>;
/*bigE_word is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by bigE_word
after this convert. -- Tuo*/
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);"},
clk(6){"null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);"}
}
,"LH"{variable{"wire[31:0] source0;
wire[31:0] source1;
wire[31:0] addr;
wire[31:0] bigE_word;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire[31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);"},
clk(3){"wire[3:0] flag;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire addr_err;
wire[31:0] result;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

<result,addr_err> = Dmem.ld_16(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3, byte2, byte1, byte0>;
/*bigE_word is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by bigE_word
after this convert. -- Tuo*/
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);"},
clk(6){"null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);"}
}
,"LHU"{variable{"wire[31:0] source0;
wire[31:0] source1;
wire[31:0] addr;
wire[31:0] bigE_word;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire[31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);"},
clk(3){"wire[3:0] flag;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire addr_err;
wire[31:0] result;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

<result,addr_err> = Dmem.ldu_16(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3, byte2, byte1, byte0>;
/*bigE_word is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by bigE_word
after this convert. -- Tuo*/
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);"},
clk(6){"null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);"}
}
,"LW"{variable{"wire[31:0] source0;
wire[31:0] source1;
wire[31:0] addr;
wire[31:0] bigE_word;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire[31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);"},
clk(3){"wire[3:0] flag;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire addr_err;
wire[31:0] result;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

<result,addr_err> = Dmem.ld_32(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3, byte2, byte1, byte0>;
/*bigE_word is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by bigE_word
after this convert. -- Tuo*/
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);"},
clk(6){"null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);"}
}
,"DLW"{variable{"wire[31:0] source0;
wire[31:0] source1;
wire [31:0] addr1;
wire [31:0] addr2;
wire [31:0] bigE_word0;
wire [31:0] bigE_word1;
wire [4:0] nextRT;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire[31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);"},
clk(3){"wire [3:0] flag;
wire [3:0] tmpRT;
wire one;

<addr1,flag> = ALU1.add(source0,source1);

one ='1';
tmpRT = rt[4:1];
nextRT = <tmpRT,one>;
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);
null = FWUL0.lock2(nextRT);
null = FWUL1.lock2(nextRT);
null = FWUL2.lock2(nextRT);
null = FWUL3.lock2(nextRT);"},
clk(4){"wire cout;
wire cin;
wire [31:0] four32bit;
wire addr_err;
wire [31:0] result1;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

cin = '0';
four32bit = \"00000000000000000000000000000100\";

<result1,addr_err> = Dmem.ld_32(addr1);
byte0 = result1[31:24];
byte1 = result1[23:16];
byte2 = result1[15:8];
byte3 = result1[7:0];
bigE_word0 = <byte3, byte2, byte1, byte0>;
/*bigE_word0 is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by bigE_word0
after this convert. -- Tuo*/
null = FWUL0.forward3(rt,bigE_word0);
null = FWUL1.forward3(rt,bigE_word0);
null = FWUL2.forward3(rt,bigE_word0);
null = FWUL3.forward3(rt,bigE_word0);
<addr2,cout> = ADDER2.adc(addr1,four32bit,cin);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);
null = FWUL0.lock4(nextRT);
null = FWUL1.lock4(nextRT);
null = FWUL2.lock4(nextRT);
null = FWUL3.lock4(nextRT);"},
clk(5){"wire addr_err;
wire [31:0] result2;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

<result2,addr_err> = Dmem.ld_32(addr2);
byte0 = result2[31:24];
byte1 = result2[23:16];
byte2 = result2[15:8];
byte3 = result2[7:0];
bigE_word1 = <byte3, byte2, byte1, byte0>;
/*bigE_word1 is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by bigE_word1
after this convert. -- Tuo*/
null = FWUL0.forward5(rt,bigE_word0);
null = FWUL1.forward5(rt,bigE_word0);
null = FWUL2.forward5(rt,bigE_word0);
null = FWUL3.forward5(rt,bigE_word0);
null = FWUL0.forward6(nextRT,bigE_word1);
null = FWUL1.forward6(nextRT,bigE_word1);
null = FWUL2.forward6(nextRT,bigE_word1);
null = FWUL3.forward6(nextRT,bigE_word1);
null = FWUL0.lock5(nextRT);
null = FWUL1.lock5(nextRT);
null = FWUL2.lock5(nextRT);
null = FWUL3.lock5(nextRT);"},
clk(6){"null = FWUL0.forward7(rt,bigE_word0);
null = FWUL1.forward7(rt,bigE_word0);
null = FWUL2.forward7(rt,bigE_word0);
null = FWUL3.forward7(rt,bigE_word0);
null = FWUL0.forward8(nextRT,bigE_word1);
null = FWUL1.forward8(nextRT,bigE_word1);
null = FWUL2.forward8(nextRT,bigE_word1);
null = FWUL3.forward8(nextRT,bigE_word1);
null = GPR.write0(rt,bigE_word0);
null = GPR.write1(nextRT,bigE_word1);"}
}
,"LWL"{variable{"wire[31:0] source0;
wire[31:0] source1;
wire[31:0] source2;
wire[31:0] addr;
wire[31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire[31:0] tmp_source0;
wire[31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source2 = EXT1.sign(imm);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire[3:0] flag;

<addr,flag> = ALU1.add(source0, source2);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire[29:0] addr_mask;
wire[1:0] zero2;
wire[31:0] target;
wire[31:0] data;
wire addr_err;
wire[1:0] vAddr10;
wire[7:0] data2;
wire[7:0] data1;
wire[7:0] data0;
wire[7:0] reg2;
wire[7:0] reg1;
wire[7:0] reg0;
wire[31:0] result3;
wire[31:0] result2;
wire[31:0] result1;
wire[31:0] result0;
wire[31:0] bigE_data;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

addr_mask = addr[31:2];
vAddr10 = addr[1:0];
zero2 = \"00\";
target = <addr_mask,zero2>;

<data,addr_err> = Dmem.ld_32(target);

byte0 = data[31:24];
byte1 = data[23:16];
byte2 = data[15:8];
byte3 = data[7:0];
bigE_data = <byte3, byte2, byte1, byte0>;

data2 = bigE_data[23:16];
data1 = bigE_data[15:8];
data0 = bigE_data[7:0];
reg2 = source1[23:16];
reg1 = source1[15:8];
reg0 = source1[7:0];

result0 = <data0, reg2, reg1, reg0>;
result1 = <data1, data0, reg1, reg0>;
result2 = <data2, data1, data0, reg0>;
result3 = bigE_data;
result = MUXw32p4.sel(result0,result1,result2,result3,vAddr10);

null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"LWR"{variable{"wire[31:0] source0;
wire[31:0] source1;
wire[31:0] source2;
wire[31:0] addr;
wire[31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire[31:0] tmp_source0;
wire[31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source2 = EXT1.sign(imm);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire[3:0] flag;

<addr,flag> = ALU1.add(source0, source2);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire[29:0] addr_mask;
wire[1:0] zero2;
wire[31:0] target;
wire[31:0] data;
wire addr_err;
wire[1:0] vAddr10;
wire[7:0] data3;
wire[7:0] data2;
wire[7:0] data1;
wire[7:0] reg3;
wire[7:0] reg2;
wire[7:0] reg1;
wire[31:0] result3;
wire[31:0] result2;
wire[31:0] result1;
wire[31:0] result0;
wire[31:0] bigE_data;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

addr_mask = addr[31:2];
vAddr10 = addr[1:0];
zero2 = \"00\";
target = <addr_mask,zero2>;

<data,addr_err> = Dmem.ld_32(target);
byte0 = data[31:24];
byte1 = data[23:16];
byte2 = data[15:8];
byte3 = data[7:0];
bigE_data = <byte3, byte2, byte1, byte0>;
/*bigE_data is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by bigE_data
after this convert. -- Tuo*/
data3 = bigE_data[31:24];
data2 = bigE_data[23:16];
data1 = bigE_data[15:8];
reg3 = source1[31:24];
reg2 = source1[23:16];
reg1 = source1[15:8];

result3 = <reg3, reg2, reg1, data3>;
result2 = <reg3, reg2, data3, data2>;
result1 = <reg3, data3, data2, data1>;
result0 = bigE_data;
result = MUXw32p4.sel(result0,result1,result2,result3,vAddr10);

null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"SB"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] source2;
wire [31:0] addr;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source2 = EXT1.sign(imm);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source2);"},
clk(4){""},
clk(5){"wire addr_err;
wire [31:0] LE_source1;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

byte0 = source1[31:24];
byte1 = source1[23:16];
byte2 = source1[15:8];
byte3 = source1[7:0];
LE_source1 = <byte3, byte2, byte1, byte0>;
/*LE_source1 is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by LE_source1
after this convert. -- Tuo*/
addr_err = Dmem.s_8(addr,LE_source1 /*source1*/);"},
clk(6){""}
}
,"SH"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] source2;
wire [31:0] addr;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source2 = EXT1.sign(imm);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source2);"},
clk(4){""},
clk(5){"wire addr_err;
wire [31:0] LE_source1;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

byte0 = source1[31:24];
byte1 = source1[23:16];
byte2 = source1[15:8];
byte3 = source1[7:0];
LE_source1 = <byte3, byte2, byte1, byte0>;
/*LE_source1 is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by LE_source1
after this convert. -- Tuo*/
addr_err = Dmem.s_16(addr,LE_source1 /*source1*/);"},
clk(6){""}
}
,"SW"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] source2;
wire [31:0] addr;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source2 = EXT1.sign(imm);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source2);"},
clk(4){""},
clk(5){"wire addr_err;
wire [31:0] LE_source1;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

byte0 = source1[31:24];
byte1 = source1[23:16];
byte2 = source1[15:8];
byte3 = source1[7:0];
LE_source1 = <byte3, byte2, byte1, byte0>;
/*LE_source1 is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by LE_source1
after this convert. -- Tuo*/
addr_err = Dmem.s_32(addr,LE_source1 /*source1*/);"},
clk(6){""}
}
,"DSW"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] source2;
wire [31:0] source3;
wire [31:0] addr1;
wire [31:0] addr2;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;
wire [31:0] tmp_source3;
wire [4:0] rt2;
wire [3:0] oldrt;
wire one;

one = '1';
oldrt = rt[4:1];
rt2 = <oldrt,one>;
tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
tmp_source3 = GPR.read2(rt2);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);
source2 = EXT1.sign(imm);
source3 = FWUL2.forward(rt2,tmp_source3);"},
clk(3){"wire [3:0] flag;
wire cin;
wire cout;
wire [31:0] four32bit;

<addr1, flag> = ALU1.add(source0,source2);
cin = '1';
four32bit = \"00000000000000000000000000000100\";
<addr2,cout> = ADDER2.adc(addr1,four32bit,cin);"},
clk(4){""},
clk(5){"wire addr_err;
wire [31:0] LE_source1;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

byte0 = source1[31:24];
byte1 = source1[23:16];
byte2 = source1[15:8];
byte3 = source1[7:0];
LE_source1 = <byte3, byte2, byte1, byte0>;
/*LE_source1 is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by LE_source1
after this convert. -- Tuo*/
addr_err = Dmem.s_32(addr1,LE_source1 /*source1*/);"},
clk(6){"wire addr_err;
wire [31:0] LE_source3;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

byte0 = source3[31:24];
byte1 = source3[23:16];
byte2 = source3[15:8];
byte3 = source3[7:0];
LE_source3 = <byte3, byte2, byte1, byte0>;
/*LE_source3 is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by LE_source3
after this convert. -- Tuo*/
addr_err = Dmem.s_32(addr2,LE_source3 /*source3*/);"}
}
,"DSZ"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] source2;
wire [31:0] addr1;
wire [31:0] addr2;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [4:0] zero5;
wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

zero5 = \"00000\";
tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(zero5);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(zero5,tmp_source1);
source2 = EXT1.sign(imm);"},
clk(3){"wire [3:0] flag;

<addr1,flag> = ALU1.add(source0,source2);"},
clk(4){"wire cin;
wire cout;
wire [31:0] four32bit;

cin = '1';
four32bit =\"00000000000000000000000000000100\";
<addr2,cout> = ADDER2.adc(addr1,four32bit,cin);"},
clk(5){"wire addr_err;

addr_err = Dmem.s_32(addr1,source1);"},
clk(6){"wire addr_err;

addr_err = Dmem.s_32(addr2,source1);"}
}
,"SWL"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] source2;
wire [31:0] tmp_pc;
wire [31:0] addr;
wire [31:0] result;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source2 = EXT1.sign(imm);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0, source2);"},
clk(4){"wire [29:0] addr_mask;
wire [1:0] zero2;
wire [31:0] target;
wire [31:0] data;
wire addr_err;
wire [1:0] vAddr10;
wire [7:0] data3;
wire [7:0] data2;
wire [7:0] data1;
wire [7:0] reg3;
wire [7:0] reg2;
wire [7:0] reg1;
wire [31:0] result3;
wire [31:0] result2;
wire [31:0] result1;
wire [31:0] result0;
wire [31:0] nData;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

addr_mask = addr[31:2];
vAddr10 = addr[1:0];
zero2 = \"00\";
target = <addr_mask, zero2>;

<data, addr_err> = Dmem.ld_32(target);

byte0 = data[31:24];
byte1 = data[23:16];
byte2 = data[15:8];
byte3 = data[7:0];
nData = <byte3, byte2, byte1, byte0>;

data3 = nData[31:24];
data2 = nData[23:16];
data1 = nData[15:8];
reg3 = source1[31:24];
reg2 = source1[23:16];
reg1 = source1[15:8];
result3 = source1;
result2 = <data3, reg3, reg2, reg1>;
result1 = <data3, data2, reg3, reg2>;
result0 = <data3, data2, data1, reg3>;
result = MUXw32p4.sel(result0,result1,result2,result3,vAddr10);"},
clk(5){"wire addr_err;
wire [29:0] addr_mask;
wire [1:0] zero2;
wire [31:0] target;
wire [31:0] nResult;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

addr_mask = addr[31:2];
zero2 = \"00\";
target = <addr_mask, zero2>;

byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
nResult = <byte3, byte2, byte1, byte0>;

addr_err = Dmem.s_32(target, nResult);"},
clk(6){""}
}
,"SWR"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] source2;
wire [31:0] tmp_pc;
wire [31:0] addr;
wire [31:0] result;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source2 = EXT1.sign(imm);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<addr, flag> = ALU1.add(source0,source2);"},
clk(4){"wire [29:0] addr_mask;
wire [1:0] zero2;
wire [31:0] target;
wire [31:0] data;
wire addr_err;
wire [1:0] vAddr10;
wire [7:0] data2;
wire [7:0] data1;
wire [7:0] data0;
wire [7:0] reg2;
wire [7:0] reg1;
wire [7:0] reg0;
wire [31:0] result3;
wire [31:0] result2;
wire [31:0] result1;
wire [31:0] result0;
wire [31:0] nData;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

addr_mask = addr[31:2];
vAddr10 = addr[1:0];
zero2 = \"00\";
target = <addr_mask, zero2>;

<data, addr_err> = Dmem.ld_32(target);

byte0 = data[31:24];
byte1 = data[23:16];
byte2 = data[15:8];
byte3 = data[7:0];
nData = <byte3, byte2, byte1, byte0>;

data2 = nData[23:16];
data1 = nData[15:8];
data0 = nData[7:0];
reg2 = source1[23:16];
reg1 = source1[15:8];
reg0 = source1[7:0];

result0 = source1;
result1 = <reg2, reg1, reg0, data0>;
result2 = <reg1, reg0, data1, data0>;
result3 = <reg0, data2, data1, data0>;
result = MUXw32p4.sel(result0,result1,result2,result3,vAddr10);"},
clk(5){"wire addr_err;
wire [29:0] addr_mask;
wire [1:0] zero2;
wire [31:0] target;
wire [31:0] nResult;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

addr_mask = addr[31:2];
zero2 = \"00\";

byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
nResult = <byte3, byte2, byte1, byte0>;

target = <addr_mask, zero2>;
addr_err = Dmem.s_32(target, nResult);"},
clk(6){""}
}
,"LB_RR"{variable{"wire[31:0] addr;
wire[31:0] bigE_word;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rd);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rd,tmp_source1);"},
clk(3){"wire[3:0] flag;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire addr_err;
wire[31:0] result;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

<result,addr_err> = Dmem.ld_8(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3, byte2, byte1, byte0>;
/*bigE_word is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by bigE_word
after this convert. -- Tuo*/
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);"},
clk(6){"null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);"}
}
,"LBU_RR"{variable{"wire[31:0] addr;
wire[31:0] bigE_word;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rd);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rd,tmp_source1);"},
clk(3){"wire[3:0] flag;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire addr_err;
wire[31:0] result;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

<result,addr_err> = Dmem.ldu_8(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3, byte2, byte1, byte0>;
/*bigE_word is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by bigE_word
after this convert. -- Tuo*/
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);"},
clk(6){"null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);"}
}
,"LH_RR"{variable{"wire[31:0] addr;
wire[31:0] bigE_word;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rd);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rd,tmp_source1);"},
clk(3){"wire[3:0] flag;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire addr_err;
wire[31:0] result;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

<result,addr_err> = Dmem.ld_16(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3, byte2, byte1, byte0>;
/*bigE_word is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by bigE_word
after this convert. -- Tuo*/
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);"},
clk(6){"null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);"}
}
,"LHU_RR"{variable{"wire[31:0] addr;
wire[31:0] bigE_word;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rd);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rd,tmp_source1);"},
clk(3){"wire[3:0] flag;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire addr_err;
wire[31:0] result;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

<result,addr_err> = Dmem.ldu_16(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3, byte2, byte1, byte0>;
/*bigE_word is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by bigE_word
after this convert. -- Tuo*/
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);"},
clk(6){"null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);"}
}
,"LW_RR"{variable{"wire[31:0] addr;
wire[31:0] bigE_word;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rd);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rd,tmp_source1);"},
clk(3){"wire[3:0] flag;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire addr_err;
wire[31:0] result;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

<result,addr_err> = Dmem.ld_32(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3, byte2, byte1, byte0>;
/*bigE_word is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by bigE_word
after this convert. -- Tuo*/
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);"},
clk(6){"null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);"}
}
,"DLW_RR"{variable{"wire [31:0] addr1;
wire [31:0] addr2;
wire [31:0] bigE_word0;
wire [31:0] bigE_word1;
wire [4:0] nextRT;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rd);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rd,tmp_source1);"},
clk(3){"wire [3:0] flag;
wire [3:0] tmpRT;
wire one;

<addr1,flag> = ALU1.add(source0,source1);

one ='1';
tmpRT = rt[4:1];
nextRT = <tmpRT,one>;
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);
null = FWUL0.lock2(nextRT);
null = FWUL1.lock2(nextRT);
null = FWUL2.lock2(nextRT);
null = FWUL3.lock2(nextRT);"},
clk(4){"wire cout;
wire cin;
wire [31:0] four32bit;
wire addr_err;
wire [31:0] result1;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

cin = '0';
four32bit = \"00000000000000000000000000000100\";

<result1,addr_err> = Dmem.ld_32(addr1);
byte0 = result1[31:24];
byte1 = result1[23:16];
byte2 = result1[15:8];
byte3 = result1[7:0];
bigE_word0 = <byte3, byte2, byte1, byte0>;
/*bigE_word0 is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by bigE_word0
after this convert. -- Tuo*/
null = FWUL0.forward3(rt,bigE_word0);
null = FWUL1.forward3(rt,bigE_word0);
null = FWUL2.forward3(rt,bigE_word0);
null = FWUL3.forward3(rt,bigE_word0);
<addr2,cout> = ADDER2.adc(addr1,four32bit,cin);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);
null = FWUL0.lock4(nextRT);
null = FWUL1.lock4(nextRT);
null = FWUL2.lock4(nextRT);
null = FWUL3.lock4(nextRT);"},
clk(5){"wire addr_err;
wire [31:0] result2;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

<result2,addr_err> = Dmem.ld_32(addr2);
byte0 = result2[31:24];
byte1 = result2[23:16];
byte2 = result2[15:8];
byte3 = result2[7:0];
bigE_word1 = <byte3, byte2, byte1, byte0>;
/*bigE_word1 is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by bigE_word1
after this convert. -- Tuo*/
null = FWUL0.forward5(rt,bigE_word0);
null = FWUL1.forward5(rt,bigE_word0);
null = FWUL2.forward5(rt,bigE_word0);
null = FWUL3.forward5(rt,bigE_word0);
null = FWUL0.forward6(nextRT,bigE_word1);
null = FWUL1.forward6(nextRT,bigE_word1);
null = FWUL2.forward6(nextRT,bigE_word1);
null = FWUL3.forward6(nextRT,bigE_word1);
null = FWUL0.lock5(nextRT);
null = FWUL1.lock5(nextRT);
null = FWUL2.lock5(nextRT);
null = FWUL3.lock5(nextRT);"},
clk(6){"null = FWUL0.forward7(rt,bigE_word0);
null = FWUL1.forward7(rt,bigE_word0);
null = FWUL2.forward7(rt,bigE_word0);
null = FWUL3.forward7(rt,bigE_word0);
null = FWUL0.forward8(nextRT,bigE_word1);
null = FWUL1.forward8(nextRT,bigE_word1);
null = FWUL2.forward8(nextRT,bigE_word1);
null = FWUL3.forward8(nextRT,bigE_word1);
null = GPR.write0(rt,bigE_word0);
null = GPR.write1(nextRT,bigE_word1);"}
}
,"SB_RR"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] source2;
wire [31:0] addr;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;
wire [31:0] tmp_source2;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
tmp_source2 = GPR.read2(rd);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);
source2 = FWUL2.forward(rd,tmp_source2);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source2);"},
clk(4){""},
clk(5){"wire addr_err;
wire [31:0] LE_source1;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

byte0 = source1[31:24];
byte1 = source1[23:16];
byte2 = source1[15:8];
byte3 = source1[7:0];
LE_source1 = <byte3, byte2, byte1, byte0>;
/*LE_source1 is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by LE_source1
after this convert. -- Tuo*/
addr_err = Dmem.s_8(addr,LE_source1 /*source1*/);"},
clk(6){""}
}
,"SH_RR"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] source2;
wire [31:0] addr;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;
wire [31:0] tmp_source2;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
tmp_source2 = GPR.read2(rd);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);
source2 = FWUL2.forward(rd,tmp_source2);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source2);"},
clk(4){""},
clk(5){"wire addr_err;
wire [31:0] LE_source1;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

byte0 = source1[31:24];
byte1 = source1[23:16];
byte2 = source1[15:8];
byte3 = source1[7:0];
LE_source1 = <byte3, byte2, byte1, byte0>;
/*LE_source1 is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by LE_source1
after this convert. -- Tuo*/
addr_err = Dmem.s_16(addr,LE_source1 /*source1*/);"},
clk(6){""}
}
,"SW_RR"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] source2;
wire [31:0] addr;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;
wire [31:0] tmp_source2;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
tmp_source2 = GPR.read2(rd);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);
source2 = FWUL2.forward(rd,tmp_source2);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source2);"},
clk(4){""},
clk(5){"wire addr_err;
wire [31:0] LE_source1;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

byte0 = source1[31:24];
byte1 = source1[23:16];
byte2 = source1[15:8];
byte3 = source1[7:0];
LE_source1 = <byte3, byte2, byte1, byte0>;
/*LE_source1 is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by LE_source1
after this convert. -- Tuo*/
addr_err = Dmem.s_32(addr,LE_source1 /*source1*/);"},
clk(6){""}
}
,"DSW_RR"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] source2;
wire [31:0] source3;
wire [31:0] addr1;
wire [31:0] addr2;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [4:0] rt2;
wire [3:0] oldrt;
wire one;
wire [31:0] tmp_source0;
wire [31:0] tmp_source1;
wire [31:0] tmp_source2;
wire [31:0] tmp_source3;

one = '1';
oldrt = rt[4:1];
rt2 = <oldrt,one>;
tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
tmp_source2 = GPR.read2(rd);
tmp_source3 = GPR.read3(rt2);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);
source2 = FWUL2.forward(rd,tmp_source2);
source3 = FWUL3.forward(rt2,tmp_source3);"},
clk(3){"wire [3:0] flag;
wire cin;
wire cout;
wire [31:0] four32bit;

<addr1, flag> = ALU1.add(source0,source2);
cin = '1';
four32bit = \"00000000000000000000000000000100\";
<addr2,cout> = ADDER2.adc(addr1,four32bit,cin);"},
clk(4){""},
clk(5){"wire addr_err;
wire [31:0] LE_source1;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

byte0 = source1[31:24];
byte1 = source1[23:16];
byte2 = source1[15:8];
byte3 = source1[7:0];
LE_source1 = <byte3, byte2, byte1, byte0>;
/*LE_source1 is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by LE_source1
after this convert. -- Tuo*/
addr_err = Dmem.s_32(addr1,LE_source1 /*source1*/);"},
clk(6){"wire addr_err;
wire [31:0] LE_source3;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;

byte0 = source3[31:24];
byte1 = source3[23:16];
byte2 = source3[15:8];
byte3 = source3[7:0];
LE_source3 = <byte3, byte2, byte1, byte0>;
/*LE_source3 is the output of this macro algorithm,
which converts a little-endian word to
big-endian, or vice versa. This macro should be added to
load/store instructions, where the variable
e.g.\"result\" should be substituted by LE_source3
after this convert. -- Tuo*/
addr_err = Dmem.s_32(addr2,LE_source3 /*source3*/);"}
}
,"DSZ_RR"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] source2;
wire [31:0] addr1;
wire [31:0] addr2;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [4:0] zero5;
wire [31:0] tmp_source0;
wire [31:0] tmp_source1;
wire [31:0] tmp_source2;

zero5 = \"00000\";
tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(zero5);
tmp_source2 = GPR.read2(rd);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(zero5,tmp_source1);
source2 = FWUL2.forward(rd,tmp_source2);"},
clk(3){"wire [3:0] flag;

<addr1,flag> = ALU1.add(source0,source2);"},
clk(4){"wire cin;
wire cout;
wire [31:0] four32bit;

cin = '1';
four32bit =\"00000000000000000000000000000100\";
<addr2,cout> = ADDER2.adc(addr1,four32bit,cin);"},
clk(5){"wire addr_err;

addr_err = Dmem.s_32(addr1,source1);"},
clk(6){"wire addr_err;

addr_err = Dmem.s_32(addr2,source1);"}
}
,"JUMP"{variable{"wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_cpc;
wire [1:0] const;
wire [3:0] cpc_top;
wire zero1b0;
wire one1b0;

one1b0 = '1';
zero1b0 = '0';
const = \"00\";
tmp_cpc = CPC.read();
cpc_top = tmp_cpc[31:28];
result = <cpc_top,targ,const>;"},
clk(3){"null = CPC.write(result);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"JAL"{variable{"wire [31:0] link;
wire [4:0] linkReg;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_cpc;
wire [1:0] const;
wire [3:0] cpc_top;

const = \"00\";
tmp_cpc = CPC.read();
link = tmp_cpc;
cpc_top = tmp_cpc[31:28];
result = <cpc_top,targ,const>;
linkReg = \"11111\";"},
clk(3){"null = CPC.write(result);
null = FWUL0.forward1(linkReg,link);
null = FWUL1.forward1(linkReg,link);
null = FWUL2.forward1(linkReg,link);
null = FWUL3.forward1(linkReg,link);"},
clk(4){"null = FWUL0.forward3(linkReg,link);
null = FWUL1.forward3(linkReg,link);
null = FWUL2.forward3(linkReg,link);
null = FWUL3.forward3(linkReg,link);"},
clk(5){"null = FWUL0.forward5(linkReg,link);
null = FWUL1.forward5(linkReg,link);
null = FWUL2.forward5(linkReg,link);
null = FWUL3.forward5(linkReg,link);"},
clk(6){"null = GPR.write0(linkReg,link);
null = FWUL0.forward7(linkReg,link);
null = FWUL1.forward7(linkReg,link);
null = FWUL2.forward7(linkReg,link);
null = FWUL3.forward7(linkReg,link);"}
}
,"JR"{variable{"wire [31:0] target;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source;

tmp_source = GPR.read0(rs);
target = FWUL0.forward(rs,tmp_source);"},
clk(3){"null =CPC.write(target);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"JALR"{variable{"wire [31:0] target;
wire [31:0] link;
wire [4:0] linkReg;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source;

link = CPC.read();
tmp_source = GPR.read0(rs);
target = FWUL0.forward(rs,tmp_source);"},
clk(3){"null = CPC.write(target);
linkReg = \"11111\";
null = FWUL0.forward1(linkReg,link);
null = FWUL1.forward1(linkReg,link);
null = FWUL2.forward1(linkReg,link);
null = FWUL3.forward1(linkReg,link);"},
clk(4){"null = FWUL0.forward3(linkReg,link);
null = FWUL1.forward3(linkReg,link);
null = FWUL2.forward3(linkReg,link);
null = FWUL3.forward3(linkReg,link);"},
clk(5){"null = FWUL0.forward5(linkReg,link);
null = FWUL1.forward5(linkReg,link);
null = FWUL2.forward5(linkReg,link);
null = FWUL3.forward5(linkReg,link);"},
clk(6){"null = GPR.write0(linkReg,link);
null = FWUL0.forward7(linkReg,link);
null = FWUL1.forward7(linkReg,link);
null = FWUL2.forward7(linkReg,link);
null = FWUL3.forward7(linkReg,link);"}
}
,"BEQ"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] target;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;
wire cin;
wire cout;
wire [1:0] zero2;
wire [31:0] ext_imm;
wire [29:0] tmp;
wire [31:0] offset;
wire [31:0] tmp_cpc;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);
cin = '0';
zero2 = \"00\";
ext_imm = EXT1.sign(imm);
tmp = ext_imm[29:0];
offset = <tmp,zero2>;
tmp_cpc = CPC.read();
<target,cout> = ADD1.adc(tmp_cpc,offset,cin);"},
clk(3){"wire zero;
wire cond;
wire [3:0] flag;

flag = ALU1.cmp(source0,source1);
zero = flag[2];
cond = zero =='1';
null = [cond] CPC.write(target);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"BNE"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] target;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;
wire cin;
wire cout;
wire [1:0] zero2;
wire [31:0] ext_imm;
wire [29:0] tmp;
wire [31:0] offset;
wire [31:0] tmp_cpc;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);
cin = '0';
zero2 = \"00\";
ext_imm = EXT1.sign(imm);
tmp = ext_imm[29:0];
offset = <tmp,zero2>;
tmp_cpc = CPC.read();
<target,cout> = ADD1.adc(tmp_cpc,offset,cin);"},
clk(3){"wire zero;
wire cond;
wire [3:0] flag;

flag = ALU1.cmp(source0,source1);
zero = flag[2];
cond = zero !='1';
null = [cond] CPC.write(target);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"BLEZ"{variable{"wire [31:0] target;
wire [31:0] src0;
wire[31:0] source0;
wire[31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_cpc;
wire cout;
wire [31:0] offset;
wire [31:0] ext_imm;
wire [29:0] tmp;
wire [1:0] zero2;
wire cin;

tmp_source0 = GPR.read0(rs);
src0 = FWU0.forward(rs,tmp_source0);
cin = '0';
zero2 = \"00\";
ext_imm = EXT1.sign(imm);
tmp = ext_imm[29:0];
offset = <tmp,zero2>;
tmp_cpc = CPC.read();
<target,cout> = ADD1.adc(tmp_cpc,offset,cin);"},
clk(3){"wire cond_tmp;
wire cond;
wire [3:0] flag;
wire N;
wire Z;

flag = ALU1.cmpz(src0);
N = flag[1];
Z = flag[2];
cond_tmp = N|Z;
cond = cond_tmp == '1';
null = [cond] CPC.write(target);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"BGTZ"{variable{"wire [31:0] src0;
wire [31:0] target;
wire[31:0] source0;
wire[31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_cpc;
wire cout;
wire [31:0] offset;
wire [31:0] ext_imm;
wire [29:0] tmp;
wire [1:0] zero2;
wire cin;

tmp_source0 = GPR.read0(rs);
src0 = FWU0.forward(rs,tmp_source0);
cin = '0';
zero2 = \"00\";
ext_imm = EXT1.sign(imm);
tmp = ext_imm[29:0];
offset = <tmp,zero2>;
tmp_cpc = CPC.read();
<target,cout> = ADD1.adc(tmp_cpc,offset,cin);"},
clk(3){"wire cond_tmp;
wire cond;
wire [3:0] flag;
wire N;
wire Z;

flag = ALU1.cmpz(src0);
N = flag[1];
Z = flag[2];
cond_tmp = N|Z;
cond = cond_tmp != '1';
null = [cond] CPC.write(target);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"BLTZ"{variable{"wire [31:0] src0;
wire [31:0] target;
wire[31:0] source0;
wire[31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_cpc;
wire cout;
wire [31:0] offset;
wire [31:0] ext_imm;
wire [29:0] tmp;
wire [1:0] zero2;
wire cin;

tmp_source0 = GPR.read0(rs);
src0 = FWU0.forward(rs,tmp_source0);
cin = '0';
zero2 = \"00\";
ext_imm = EXT1.sign(imm);
tmp = ext_imm[29:0];
offset = <tmp,zero2>;
tmp_cpc = CPC.read();
<target,cout> = ADD1.adc(tmp_cpc,offset,cin);"},
clk(3){"wire cond;
wire [3:0] flag;
wire N;

flag = ALU1.cmpz(src0);
N = flag[1];
cond = N == '1';
null = [cond] CPC.write(target);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"BGEZ"{variable{"wire [31:0] src0;
wire [31:0] target;
wire[31:0] source0;
wire[31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_cpc;
wire cout;
wire [31:0] offset;
wire [31:0] ext_imm;
wire [29:0] tmp;
wire [1:0] zero2;
wire cin;

tmp_source0 = GPR.read0(rs);
src0 = FWU0.forward(rs,tmp_source0);
cin = '0';
zero2 = \"00\";
ext_imm = EXT1.sign(imm);
tmp = ext_imm[29:0];
offset = <tmp,zero2>;
tmp_cpc = CPC.read();
<target,cout> = ADD1.adc(tmp_cpc,offset,cin);"},
clk(3){"wire cond;
wire [3:0] flag;
wire N;

flag = ALU1.cmpz(src0);
N = flag[1];
cond = N != '1';
null = [cond] CPC.write(target);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"ADD"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.add(source0,source1);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"ADDI"{variable{"wire[31:0] source0;
wire[31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire[31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.add(source0,source1);
null = FWUL0.forward1(rt,result);
null = FWUL1.forward1(rt,result);
null = FWUL2.forward1(rt,result);
null = FWUL3.forward1(rt,result);"},
clk(4){"null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"ADDU"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.addu(source0,source1);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"ADDIU"{variable{"wire[31:0] source0;
wire[31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire[31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.addu(source0,source1);
null = FWUL0.forward1(rt,result);
null = FWUL1.forward1(rt,result);
null = FWUL2.forward1(rt,result);
null = FWUL3.forward1(rt,result);"},
clk(4){"null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"SUB"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.sub(source0,source1);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SUBU"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.subu(source0,source1);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"MULT"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] resulthi;
wire [31:0] resultlo;
wire [63:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"result = MUL1.mul(source0,source1);
resulthi = result[63:32];
resultlo = result[31:0];
null = LO.write(resultlo);
null = HI.write(resulthi);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"MULTU"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] resulthi;
wire [31:0] resultlo;
wire [63:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"result = MUL1.mulu(source0,source1);
resulthi = result[63:32];
resultlo = result[31:0];
null = LO.write(resultlo);
null = HI.write(resulthi);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"DIV"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] resulthi;
wire [31:0] resultlo;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire flag;

<resultlo,resulthi,flag> = DIV1.div(source0,source1);
null = LO.write(resultlo);
null = HI.write(resulthi);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"DIVU"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] resulthi;
wire [31:0] resultlo;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire flag;

<resultlo,resulthi,flag> = DIV1.divu(source0,source1);
null = LO.write(resultlo);
null = HI.write(resulthi);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"MFHI"{variable{"wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire zero1b;
wire one1b0;

one1b0 = '1';
zero1b = '0';
result = HI.read();"},
clk(3){"null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"MTHI"{variable{"wire [31:0] source0;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);"},
clk(3){"null = HI.write(source0);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"MFLO"{variable{"wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire zero1b;
wire one1b0;

one1b0 = '1';
zero1b = '0';
result = LO.read();"},
clk(3){"null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"MTLO"{variable{"wire [31:0] source0;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);"},
clk(3){"null = LO.write(source0);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"AND"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.and(source0,source1);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"ANDI"{variable{"wire [31:0] result;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.zero(imm);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.and(source0,source1);
null = FWUL0.forward1(rt,result);
null = FWUL1.forward1(rt,result);
null = FWUL2.forward1(rt,result);
null = FWUL3.forward1(rt,result);"},
clk(4){"null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"OR"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.or(source0,source1);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"ORI"{variable{"wire [31:0] result;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.zero(imm);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.or(source0,source1);
null = FWUL0.forward1(rt,result);
null = FWUL1.forward1(rt,result);
null = FWUL2.forward1(rt,result);
null = FWUL3.forward1(rt,result);"},
clk(4){"null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"XOR"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.xor(source0,source1);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"XORI"{variable{"wire [31:0] result;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.zero(imm);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.xor(source0,source1);
null = FWUL0.forward1(rt,result);
null = FWUL1.forward1(rt,result);
null = FWUL2.forward1(rt,result);
null = FWUL3.forward1(rt,result);"},
clk(4){"null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"NOR"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.nor(source0,source1);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SLL"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [23:0] zero24;

zero24 = \"000000000000000000000000\";

tmp_source0 = GPR.read0(rt);
source0 = FWUL0.forward(rt,tmp_source0);
source1 = <zero24,shamt>;"},
clk(3){"wire [4:0] shift;

shift = source1[4:0];
result = SFT1.sll(source0,shift);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SLLV"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [4:0] shift;

shift = source0[4:0];
result = SFT1.sll(source1,shift);
/*rs has the shamt*/
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SRL"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [23:0] zero24;

zero24 = \"000000000000000000000000\";

tmp_source0 = GPR.read0(rt);
source0 = FWUL0.forward(rt,tmp_source0);
source1 = <zero24,shamt>;"},
clk(3){"wire [4:0] shift;

shift = source1[4:0];
result = SFT1.srl(source0,shift);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SRLV"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [4:0] shift;

shift = source0[4:0];
result = SFT1.srl(source1,shift);
/*rs -> source1 has the shamt*/
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SRA"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [23:0] zero24;

zero24 = \"000000000000000000000000\";

tmp_source0 = GPR.read0(rt);
source0 = FWUL0.forward(rt,tmp_source0);
source1 = <zero24,shamt>;"},
clk(3){"wire [4:0] shift;

shift = source1[4:0];
result = SFT1.sra(source0,shift);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SRAV"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [4:0] shift;

shift = source0[4:0];
result = SFT1.sra(source1,shift);
/*rs -> source1 has the shamt*/
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SLT"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;
wire [1:0] flag2;
wire NnV;
wire VnN;
wire cond;
wire [30:0] zero31;

zero31 = \"0000000000000000000000000000000\";

flag = ALU1.cmp(source0,source1);
flag2 = flag[1:0];

NnV = flag2 == \"10\";
VnN = flag == \"1001\";
cond = NnV | VnN;
result = <zero31,cond>;
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SLTI"{variable{"wire[31:0] source0;
wire[31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire[31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);"},
clk(3){"wire [3:0] flag;
wire [1:0] flag2;
wire NnV;
wire VnN;
wire cond;
wire [30:0] zero31;

zero31 = \"0000000000000000000000000000000\";

flag = ALU1.cmp(source0,source1);
flag2 = flag[1:0];

NnV = flag2 == \"10\";
VnN = flag == \"1001\";
cond = NnV | VnN;
result = <zero31,cond>;
null = FWUL0.forward1(rt,result);
null = FWUL1.forward1(rt,result);
null = FWUL2.forward1(rt,result);
null = FWUL3.forward1(rt,result);"},
clk(4){"null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"SLTU"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);

source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;
wire [1:0] flag2;
wire cond;
wire [30:0] zero31;

zero31 = \"0000000000000000000000000000000\";

flag = ALU1.cmpu(source0,source1);
flag2 = flag[3:2];
cond = flag2 == \"00\";
result = <zero31,cond>;
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SLTIU"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.zero(imm);"},
clk(3){"wire [3:0] flag;
wire [1:0] flag2;
wire cond;
wire [30:0] zero31;

zero31 = \"0000000000000000000000000000000\";

flag = ALU1.cmpu(source0,source1);
flag2 = flag[3:2];
cond = flag2 == \"00\";
result = <zero31,cond>;
null = FWUL0.forward1(rt,result);
null = FWUL1.forward1(rt,result);
null = FWUL2.forward1(rt,result);
null = FWUL3.forward1(rt,result);"},
clk(4){"null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"NOP"{variable{"wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){""},
clk(3){""},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"LUI"{variable{"wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [15:0] zero16;

zero16 = \"0000000000000000\";
result = <imm,zero16>;"},
clk(3){"null = FWUL0.forward1(rt,result);
null = FWUL1.forward1(rt,result);
null = FWUL2.forward1(rt,result);
null = FWUL3.forward1(rt,result);"},
clk(4){"null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"SYSCALL"{variable{"wire [31:0] tmp_cpc;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"tmp_cpc = CPC.read();"},
clk(3){"wire [31:0] result;

result = \"00000000000000000000000001100000\";
null = SYSREG.write(tmp_cpc);
null = CPC.write(result);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"BREAK"{variable{"wire[31:0] tmp_cpc;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"tmp_cpc = CPC.read();"},
clk(3){"wire [31:0] result;

null = SYSREG.write(tmp_cpc);
result = \"00000000000000000000000000110000\";
null = CPC.write(result);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"SYSRET"{variable{"wire[31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"result = SYSREG.read();"},
clk(3){"null = CPC.write(result);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"LBm"{variable{"wire[31:0] addr;
wire[31:0] bigE_word;
wire [31:0] tmp_pc;
wire[31:0] source0;
wire[31:0] source1;"},clk(1){"wire[31:0] current_pc;
wire iramaddr_err; 
wire[63:0] inst0;

current_pc = CPC.read();
tmp_pc=current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire[31:0] tmp_source0;
wire [31:0] cycle;
wire [26:0] zero27b;
wire [1:0] f0_rrd0;
wire [2:0] f1_rrd0;
wire [31:0] f2_rrd0;
wire [31:0] f3_rrd0;
wire [31:0] f4_rrd0;
wire [31:0] f5_rrd0;
wire [2:0] f6_rrd0;
wire [135:0] code_rrd0;
wire [1:0] f0_fwd0;
wire [2:0] f1_fwd0;
wire [31:0] f2_fwd0;
wire [31:0] f3_fwd0;
wire [31:0] f4_fwd0;
wire [31:0] f5_fwd0;
wire [2:0] f6_fwd0;
wire [135:0] code_fwd0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);

cycle = CYCLEWIRE_FORMA_ID.read();
zero27b = \"000000000000000000000000000\";
f0_rrd0 = \"00\";
f1_rrd0 = \"000\";
f2_rrd0 = <zero27b,rs>;
f3_rrd0 = tmp_source0;
f4_rrd0 = cycle;
f5_rrd0 = tmp_pc;
f6_rrd0 = \"001\";
code_rrd0 = <f0_rrd0,f1_rrd0,f2_rrd0,f3_rrd0,f4_rrd0,f5_rrd0,f6_rrd0>;
null = DATAOUT_FORMA_ID0.write(code_rrd0);

f0_fwd0 = \"00\";
f1_fwd0 = \"011\";
f2_fwd0 = <zero27b,rs>;
f3_fwd0 = source0;
f4_fwd0 = cycle;
f5_fwd0 = tmp_pc;
f6_fwd0 = \"001\";
code_fwd0 = <f0_fwd0,f1_fwd0,f2_fwd0,f3_fwd0,f4_fwd0,f5_fwd0,f6_fwd0>;
null = DATAOUT_FORMA_ID1.write(code_fwd0);"},
clk(3){"wire[3:0] flag;
wire [31:0] cycle;
wire ctrlwire_ex0;
wire cond_ex0;
wire [1:0] f0_ex0;
wire [2:0] f1_ex0;
wire [31:0] f2_ex0;
wire [31:0] f3_ex0;
wire [31:0] f4_ex0;
wire [31:0] f5_ex0;
wire [2:0] f6_ex0;
wire [135:0] code_ex0;
wire ctrlwire_ex1;
wire cond_ex1;
wire ctrlwire_ex2;
wire cond_ex2;

<addr,flag> = ALU1.add(source0,source1);

null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);

cycle = CYCLEWIRE_FORMA_EX.read();
ctrlwire_ex0 = CTRLWIRE_FORMA_EX0.read();
cond_ex0 = ctrlwire_ex0 == '1';
f0_ex0 = \"10\";
f1_ex0 = \"100\";
f2_ex0 = \"00000000000000000000000000000000\";
f3_ex0 = \"00000000000000000000000000000000\";
f4_ex0 = cycle;
f5_ex0 = tmp_pc;
f6_ex0 = \"010\";
code_ex0 = <f0_ex0,f1_ex0,f2_ex0,f3_ex0,f4_ex0,f5_ex0,f6_ex0>;
null = [cond_ex0]DATAOUT_FORMA_EX0.write(code_ex0);

ctrlwire_ex1 = CTRLWIRE_FORMA_EX1.read();
cond_ex1 = ctrlwire_ex1 == '1';
null = [cond_ex1]DATAOUT_FORMA_EX1.write(code_ex0);

ctrlwire_ex2 = CTRLWIRE_FORMA_EX2.read();
cond_ex2 = ctrlwire_ex2 == '1';
null = [cond_ex2]DATAOUT_FORMA_EX2.write(code_ex0);"},
clk(4){"wire addr_err;
wire[31:0] result;
wire [7:0] byte0;
wire [7:0] byte1;
wire [7:0] byte2;
wire [7:0] byte3;
wire [31:0] cycle;
wire ctrlwire_m10;
wire cond_m10;
wire [1:0] f0_m10;
wire [2:0] f1_m10;
wire [31:0] f2_m10;
wire [31:0] f3_m10;
wire [31:0] f4_m10;
wire [31:0] f5_m10;
wire [2:0] f6_m10;
wire [135:0] code_m10;
wire ctrlwire_m11;
wire cond_m11;
wire ctrlwire_m12;
wire cond_m12;
wire [1:0] f0_mrd;
wire [2:0] f1_mrd;
wire [31:0] f2_mrd;
wire [31:0] f3_mrd;
wire [31:0] f4_mrd;
wire [31:0] f5_mrd;
wire [2:0] f6_mrd;
wire [135:0] code_mrd;

<result,addr_err> = Dmem.ld_8(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3, byte2, byte1, byte0>;
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);

cycle = CYCLEWIRE_FORMA_M1.read();
ctrlwire_m10 = CTRLWIRE_FORMA_M10.read();
cond_m10 = ctrlwire_m10 == '1';
f0_m10 = \"10\";
f1_m10 = \"001\";
f2_m10 = \"00000000000000000000000000000000\";
f3_m10 = \"00000000000000000000000000000000\";
f4_m10 = cycle;
f5_m10 = tmp_pc;
f6_m10 = \"011\";
code_m10 = <f0_m10,f1_m10,f2_m10,f3_m10,f4_m10,f5_m10,f6_m10>;
null = [cond_m10]DATAOUT_FORMA_M10.write(code_m10);

ctrlwire_m11 = CTRLWIRE_FORMA_M11.read();
cond_m11 = ctrlwire_m11 == '1';
null = [cond_m11]DATAOUT_FORMA_M11.write(code_m10);

ctrlwire_m12 = CTRLWIRE_FORMA_M12.read();
cond_m12 = ctrlwire_m12 == '1';
null = [cond_m12]DATAOUT_FORMA_M12.write(code_m10);

f0_mrd = \"00\";
f1_mrd = \"001\";
f2_mrd = addr;
f3_mrd = bigE_word;
f4_mrd = cycle;
f5_mrd = tmp_pc;
f6_mrd = \"011\";
code_mrd = <f0_mrd,f1_mrd,f2_mrd,f3_mrd,f4_mrd,f5_mrd,f6_mrd>;
null = DATAOUT_FORMA_M13.write(code_mrd);"},
clk(5){"wire [31:0] cycle;
wire ctrlwire_m20;
wire cond_m20;
wire [1:0] f0_m20;
wire [2:0] f1_m20;
wire [31:0] f2_m20;
wire [31:0] f3_m20;
wire [31:0] f4_m20;
wire [31:0] f5_m20;
wire [2:0] f6_m20;
wire [135:0] code_m20;
wire ctrlwire_m21;
wire cond_m21;
wire ctrlwire_m22;
wire cond_m22;
wire ctrlwire_m23;
wire cond_m23;

null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);

cycle = CYCLEWIRE_FORMA_M2.read();
ctrlwire_m20 = CTRLWIRE_FORMA_M20.read();
cond_m20 = ctrlwire_m20 == '1';
f0_m20 = \"10\";
f1_m20 = \"001\";
f2_m20 = \"00000000000000000000000000000000\";
f3_m20 = \"00000000000000000000000000000000\";
f4_m20 = cycle;
f5_m20 = tmp_pc;
f6_m20 = \"100\";
code_m20 = <f0_m20,f1_m20,f2_m20,f3_m20,f4_m20,f5_m20,f6_m20>;
null = [cond_m20]DATAOUT_FORMA_M20.write(code_m20);

ctrlwire_m21 = CTRLWIRE_FORMA_M21.read();
cond_m21 = ctrlwire_m21 == '1';
null = [cond_m21]DATAOUT_FORMA_M21.write(code_m20);

ctrlwire_m22 = CTRLWIRE_FORMA_M22.read();
cond_m22 = ctrlwire_m22 == '1';
null = [cond_m22]DATAOUT_FORMA_M22.write(code_m20);

ctrlwire_m23 = CTRLWIRE_FORMA_M23.read();
cond_m23 = ctrlwire_m23 == '1';
null = [cond_m23]DATAOUT_FORMA_M23.write(code_m20);"},
clk(6){"wire [31:0] cycle;
wire [26:0] zero27b;
wire [1:0] f0_rwr0;
wire [2:0] f1_rwr0;
wire [31:0] f2_rwr0;
wire [31:0] f3_rwr0;
wire [31:0] f4_rwr0;
wire [31:0] f5_rwr0;
wire [2:0] f6_rwr0;
wire [135:0] code_rwr0;

null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);

cycle = CYCLEWIRE_FORMA_WB.read();
zero27b = \"000000000000000000000000000\";
f0_rwr0 = \"01\";
f1_rwr0 = \"000\";
f2_rwr0 = <zero27b,rt>;
f3_rwr0 = bigE_word;
f4_rwr0 = cycle;
f5_rwr0 = tmp_pc;
f6_rwr0 = \"101\";
code_rwr0 = <f0_rwr0,f1_rwr0,f2_rwr0,f3_rwr0,f4_rwr0,f5_rwr0,f6_rwr0>;
null = DATAOUT_FORMA_WB0.write(code_rwr0);"}
}
,"LBUm"{variable{"wire [31:0] bigE_word;
wire [31:0] addr;
wire [31:0] tmp_pc;
wire[31:0] source0;
wire[31:0] source1;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] cycle;
wire [26:0] zero27b;
wire [1:0] f0_rrd0;
wire [2:0] f1_rrd0;
wire [31:0] f2_rrd0;
wire [31:0] f3_rrd0;
wire [31:0] f4_rrd0;
wire [31:0] f5_rrd0;
wire [2:0] f6_rrd0;
wire [135:0] code_rrd0;
wire [1:0] f0_fwd0;
wire [2:0] f1_fwd0;
wire [31:0] f2_fwd0;
wire [31:0] f3_fwd0;
wire [31:0] f4_fwd0;
wire [31:0] f5_fwd0;
wire [2:0] f6_fwd0;
wire [135:0] code_fwd0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);
cycle = CYCLEWIRE_FORMA_ID.read();
zero27b = \"000000000000000000000000000\";
f0_rrd0 = \"00\";
f1_rrd0 = \"000\";
f2_rrd0 = <zero27b,rs>;
f3_rrd0 = tmp_source0;
f4_rrd0 = cycle;
f5_rrd0 = tmp_pc;
f6_rrd0 = \"001\";
code_rrd0 = <f0_rrd0,f1_rrd0,f2_rrd0,f3_rrd0,f4_rrd0,f5_rrd0,f6_rrd0>;
null = DATAOUT_FORMA_ID0.write(code_rrd0);

f0_fwd0 = \"00\";
f1_fwd0 = \"011\";
f2_fwd0 = <zero27b,rs>;
f3_fwd0 = source0;
f4_fwd0 = cycle;
f5_fwd0 = tmp_pc;
f6_fwd0 = \"001\";
code_fwd0 = <f0_fwd0,f1_fwd0,f2_fwd0,f3_fwd0,f4_fwd0,f5_fwd0,f6_fwd0>;
null = DATAOUT_FORMA_ID1.write(code_fwd0);"},
clk(3){"wire [3:0] flag;
wire [31:0] cycle;
wire ctrlwire_ex0;
wire cond_ex0;
wire [1:0] f0_ex0;
wire [2:0] f1_ex0;
wire [31:0] f2_ex0;
wire [31:0] f3_ex0;
wire [31:0] f4_ex0;
wire [31:0] f5_ex0;
wire [2:0] f6_ex0;
wire [135:0] code_ex0;
wire ctrlwire_ex1;
wire cond_ex1;
wire ctrlwire_ex2;
wire cond_ex2;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);

cycle = CYCLEWIRE_FORMA_EX.read();
ctrlwire_ex0 = CTRLWIRE_FORMA_EX0.read();
cond_ex0 = ctrlwire_ex0 == '1';
f0_ex0 = \"10\";
f1_ex0 = \"100\";
f2_ex0 = \"00000000000000000000000000000000\";
f3_ex0 = \"00000000000000000000000000000000\";
f4_ex0 = cycle;
f5_ex0 = tmp_pc;
f6_ex0 = \"010\";
code_ex0 = <f0_ex0,f1_ex0,f2_ex0,f3_ex0,f4_ex0,f5_ex0,f6_ex0>;
null = [cond_ex0]DATAOUT_FORMA_EX0.write(code_ex0);

ctrlwire_ex1 = CTRLWIRE_FORMA_EX1.read();
cond_ex1 = ctrlwire_ex1 == '1';
null = [cond_ex1]DATAOUT_FORMA_EX1.write(code_ex0);

ctrlwire_ex2 = CTRLWIRE_FORMA_EX2.read();
cond_ex2 = ctrlwire_ex2 == '1';
null = [cond_ex2]DATAOUT_FORMA_EX2.write(code_ex0);"},
clk(4){"wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire [31:0] result;
wire  addr_err;
wire [31:0] cycle;
wire ctrlwire_m10;
wire cond_m10;
wire [1:0] f0_m10;
wire [2:0] f1_m10;
wire [31:0] f2_m10;
wire [31:0] f3_m10;
wire [31:0] f4_m10;
wire [31:0] f5_m10;
wire [2:0] f6_m10;
wire [135:0] code_m10;
wire ctrlwire_m11;
wire cond_m11;
wire ctrlwire_m12;
wire cond_m12;
wire [1:0] f0_mrd;
wire [2:0] f1_mrd;
wire [31:0] f2_mrd;
wire [31:0] f3_mrd;
wire [31:0] f4_mrd;
wire [31:0] f5_mrd;
wire [2:0] f6_mrd;
wire [135:0] code_mrd;

<result,addr_err> = Dmem.ldu_8(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3,byte2,byte1,byte0>;
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);

cycle = CYCLEWIRE_FORMA_M1.read();
ctrlwire_m10 = CTRLWIRE_FORMA_M10.read();
cond_m10 = ctrlwire_m10 == '1';
f0_m10 = \"10\";
f1_m10 = \"001\";
f2_m10 = \"00000000000000000000000000000000\";
f3_m10 = \"00000000000000000000000000000000\";
f4_m10 = cycle;
f5_m10 = tmp_pc;
f6_m10 = \"011\";
code_m10 = <f0_m10,f1_m10,f2_m10,f3_m10,f4_m10,f5_m10,f6_m10>;
null = [cond_m10]DATAOUT_FORMA_M10.write(code_m10);

ctrlwire_m11 = CTRLWIRE_FORMA_M11.read();
cond_m11 = ctrlwire_m11 == '1';
null = [cond_m11]DATAOUT_FORMA_M11.write(code_m10);

ctrlwire_m12 = CTRLWIRE_FORMA_M12.read();
cond_m12 = ctrlwire_m12 == '1';
null = [cond_m12]DATAOUT_FORMA_M12.write(code_m10);

f0_mrd = \"00\";
f1_mrd = \"001\";
f2_mrd = addr;
f3_mrd = bigE_word;
f4_mrd = cycle;
f5_mrd = tmp_pc;
f6_mrd = \"011\";
code_mrd = <f0_mrd,f1_mrd,f2_mrd,f3_mrd,f4_mrd,f5_mrd,f6_mrd>;
null = DATAOUT_FORMA_M13.write(code_mrd);"},
clk(5){"wire [31:0] cycle;
wire ctrlwire_m20;
wire cond_m20;
wire [1:0] f0_m20;
wire [2:0] f1_m20;
wire [31:0] f2_m20;
wire [31:0] f3_m20;
wire [31:0] f4_m20;
wire [31:0] f5_m20;
wire [2:0] f6_m20;
wire [135:0] code_m20;
wire ctrlwire_m21;
wire cond_m21;
wire ctrlwire_m22;
wire cond_m22;
wire ctrlwire_m23;
wire cond_m23;

null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);

cycle = CYCLEWIRE_FORMA_M2.read();
ctrlwire_m20 = CTRLWIRE_FORMA_M20.read();
cond_m20 = ctrlwire_m20 == '1';
f0_m20 = \"10\";
f1_m20 = \"001\";
f2_m20 = \"00000000000000000000000000000000\";
f3_m20 = \"00000000000000000000000000000000\";
f4_m20 = cycle;
f5_m20 = tmp_pc;
f6_m20 = \"100\";
code_m20 = <f0_m20,f1_m20,f2_m20,f3_m20,f4_m20,f5_m20,f6_m20>;
null = [cond_m20]DATAOUT_FORMA_M20.write(code_m20);

ctrlwire_m21 = CTRLWIRE_FORMA_M21.read();
cond_m21 = ctrlwire_m21 == '1';
null = [cond_m21]DATAOUT_FORMA_M21.write(code_m20);

ctrlwire_m22 = CTRLWIRE_FORMA_M22.read();
cond_m22 = ctrlwire_m22 == '1';
null = [cond_m22]DATAOUT_FORMA_M22.write(code_m20);

ctrlwire_m23 = CTRLWIRE_FORMA_M23.read();
cond_m23 = ctrlwire_m23 == '1';
null = [cond_m23]DATAOUT_FORMA_M23.write(code_m20);"},
clk(6){"wire [31:0] cycle;
wire [26:0] zero27b;
wire [1:0] f0_rwr0;
wire [2:0] f1_rwr0;
wire [31:0] f2_rwr0;
wire [31:0] f3_rwr0;
wire [31:0] f4_rwr0;
wire [31:0] f5_rwr0;
wire [2:0] f6_rwr0;
wire [135:0] code_rwr0;

null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);
cycle = CYCLEWIRE_FORMA_WB.read();
zero27b = \"000000000000000000000000000\";
f0_rwr0 = \"01\";
f1_rwr0 = \"000\";
f2_rwr0 = <zero27b,rt>;
f3_rwr0 = bigE_word;
f4_rwr0 = cycle;
f5_rwr0 = tmp_pc;
f6_rwr0 = \"101\";
code_rwr0 = <f0_rwr0,f1_rwr0,f2_rwr0,f3_rwr0,f4_rwr0,f5_rwr0,f6_rwr0>;
null = DATAOUT_FORMA_WB0.write(code_rwr0);"}
}
,"LHm"{variable{"wire [31:0] bigE_word;
wire [31:0] addr;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] cycle;
wire [26:0] zero27b;
wire [1:0] f0_rrd0;
wire [2:0] f1_rrd0;
wire [31:0] f2_rrd0;
wire [31:0] f3_rrd0;
wire [31:0] f4_rrd0;
wire [31:0] f5_rrd0;
wire [2:0] f6_rrd0;
wire [135:0] code_rrd0;
wire [1:0] f0_fwd0;
wire [2:0] f1_fwd0;
wire [31:0] f2_fwd0;
wire [31:0] f3_fwd0;
wire [31:0] f4_fwd0;
wire [31:0] f5_fwd0;
wire [2:0] f6_fwd0;
wire [135:0] code_fwd0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);

cycle = CYCLEWIRE_FORMA_ID.read();
zero27b = \"000000000000000000000000000\";
f0_rrd0 = \"00\";
f1_rrd0 = \"000\";
f2_rrd0 = <zero27b,rs>;
f3_rrd0 = tmp_source0;
f4_rrd0 = cycle;
f5_rrd0 = tmp_pc;
f6_rrd0 = \"001\";
code_rrd0 = <f0_rrd0,f1_rrd0,f2_rrd0,f3_rrd0,f4_rrd0,f5_rrd0,f6_rrd0>;
null = DATAOUT_FORMA_ID0.write(code_rrd0);

f0_fwd0 = \"00\";
f1_fwd0 = \"011\";
f2_fwd0 = <zero27b,rs>;
f3_fwd0 = source0;
f4_fwd0 = cycle;
f5_fwd0 = tmp_pc;
f6_fwd0 = \"001\";
code_fwd0 = <f0_fwd0,f1_fwd0,f2_fwd0,f3_fwd0,f4_fwd0,f5_fwd0,f6_fwd0>;
null = DATAOUT_FORMA_ID1.write(code_fwd0);"},
clk(3){"wire [3:0] flag;
wire [31:0] cycle;
wire ctrlwire_ex0;
wire cond_ex0;
wire [1:0] f0_ex0;
wire [2:0] f1_ex0;
wire [31:0] f2_ex0;
wire [31:0] f3_ex0;
wire [31:0] f4_ex0;
wire [31:0] f5_ex0;
wire [2:0] f6_ex0;
wire [135:0] code_ex0;
wire ctrlwire_ex1;
wire cond_ex1;
wire ctrlwire_ex2;
wire cond_ex2;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);

cycle = CYCLEWIRE_FORMA_EX.read();
ctrlwire_ex0 = CTRLWIRE_FORMA_EX0.read();
cond_ex0 = ctrlwire_ex0 == '1';
f0_ex0 = \"10\";
f1_ex0 = \"100\";
f2_ex0 = \"00000000000000000000000000000000\";
f3_ex0 = \"00000000000000000000000000000000\";
f4_ex0 = cycle;
f5_ex0 = tmp_pc;
f6_ex0 = \"010\";
code_ex0 = <f0_ex0,f1_ex0,f2_ex0,f3_ex0,f4_ex0,f5_ex0,f6_ex0>;
null = [cond_ex0]DATAOUT_FORMA_EX0.write(code_ex0);

ctrlwire_ex1 = CTRLWIRE_FORMA_EX1.read();
cond_ex1 = ctrlwire_ex1 == '1';
null = [cond_ex1]DATAOUT_FORMA_EX1.write(code_ex0);

ctrlwire_ex2 = CTRLWIRE_FORMA_EX2.read();
cond_ex2 = ctrlwire_ex2 == '1';
null = [cond_ex2]DATAOUT_FORMA_EX2.write(code_ex0);"},
clk(4){"wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire [31:0] result;
wire  addr_err;
wire [31:0] cycle;
wire ctrlwire_m10;
wire cond_m10;
wire [1:0] f0_m10;
wire [2:0] f1_m10;
wire [31:0] f2_m10;
wire [31:0] f3_m10;
wire [31:0] f4_m10;
wire [31:0] f5_m10;
wire [2:0] f6_m10;
wire [135:0] code_m10;
wire ctrlwire_m11;
wire cond_m11;
wire ctrlwire_m12;
wire cond_m12;
wire [1:0] f0_mrd;
wire [2:0] f1_mrd;
wire [31:0] f2_mrd;
wire [31:0] f3_mrd;
wire [31:0] f4_mrd;
wire [31:0] f5_mrd;
wire [2:0] f6_mrd;
wire [135:0] code_mrd;

<result,addr_err> = Dmem.ld_16(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3,byte2,byte1,byte0>;
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);

cycle = CYCLEWIRE_FORMA_M1.read();
ctrlwire_m10 = CTRLWIRE_FORMA_M10.read();
cond_m10 = ctrlwire_m10 == '1';
f0_m10 = \"10\";
f1_m10 = \"001\";
f2_m10 = \"00000000000000000000000000000000\";
f3_m10 = \"00000000000000000000000000000000\";
f4_m10 = cycle;
f5_m10 = tmp_pc;
f6_m10 = \"011\";
code_m10 = <f0_m10,f1_m10,f2_m10,f3_m10,f4_m10,f5_m10,f6_m10>;
null = [cond_m10]DATAOUT_FORMA_M10.write(code_m10);

ctrlwire_m11 = CTRLWIRE_FORMA_M11.read();
cond_m11 = ctrlwire_m11 == '1';
null = [cond_m11]DATAOUT_FORMA_M11.write(code_m10);

ctrlwire_m12 = CTRLWIRE_FORMA_M12.read();
cond_m12 = ctrlwire_m12 == '1';
null = [cond_m12]DATAOUT_FORMA_M12.write(code_m10);

f0_mrd = \"00\";
f1_mrd = \"001\";
f2_mrd = addr;
f3_mrd = bigE_word;
f4_mrd = cycle;
f5_mrd = tmp_pc;
f6_mrd = \"011\";
code_mrd = <f0_mrd,f1_mrd,f2_mrd,f3_mrd,f4_mrd,f5_mrd,f6_mrd>;
null = DATAOUT_FORMA_M13.write(code_mrd);"},
clk(5){"wire [31:0] cycle;
wire ctrlwire_m20;
wire cond_m20;
wire [1:0] f0_m20;
wire [2:0] f1_m20;
wire [31:0] f2_m20;
wire [31:0] f3_m20;
wire [31:0] f4_m20;
wire [31:0] f5_m20;
wire [2:0] f6_m20;
wire [135:0] code_m20;
wire ctrlwire_m21;
wire cond_m21;
wire ctrlwire_m22;
wire cond_m22;
wire ctrlwire_m23;
wire cond_m23;

null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);

cycle = CYCLEWIRE_FORMA_M2.read();
ctrlwire_m20 = CTRLWIRE_FORMA_M20.read();
cond_m20 = ctrlwire_m20 == '1';
f0_m20 = \"10\";
f1_m20 = \"001\";
f2_m20 = \"00000000000000000000000000000000\";
f3_m20 = \"00000000000000000000000000000000\";
f4_m20 = cycle;
f5_m20 = tmp_pc;
f6_m20 = \"100\";
code_m20 = <f0_m20,f1_m20,f2_m20,f3_m20,f4_m20,f5_m20,f6_m20>;
null = [cond_m20]DATAOUT_FORMA_M20.write(code_m20);

ctrlwire_m21 = CTRLWIRE_FORMA_M21.read();
cond_m21 = ctrlwire_m21 == '1';
null = [cond_m21]DATAOUT_FORMA_M21.write(code_m20);

ctrlwire_m22 = CTRLWIRE_FORMA_M22.read();
cond_m22 = ctrlwire_m22 == '1';
null = [cond_m22]DATAOUT_FORMA_M22.write(code_m20);

ctrlwire_m23 = CTRLWIRE_FORMA_M23.read();
cond_m23 = ctrlwire_m23 == '1';
null = [cond_m23]DATAOUT_FORMA_M23.write(code_m20);"},
clk(6){"wire [31:0] cycle;
wire [26:0] zero27b;
wire [1:0] f0_rwr0;
wire [2:0] f1_rwr0;
wire [31:0] f2_rwr0;
wire [31:0] f3_rwr0;
wire [31:0] f4_rwr0;
wire [31:0] f5_rwr0;
wire [2:0] f6_rwr0;
wire [135:0] code_rwr0;

null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);

cycle = CYCLEWIRE_FORMA_WB.read();
zero27b = \"000000000000000000000000000\";
f0_rwr0 = \"01\";
f1_rwr0 = \"000\";
f2_rwr0 = <zero27b,rt>;
f3_rwr0 = bigE_word;
f4_rwr0 = cycle;
f5_rwr0 = tmp_pc;
f6_rwr0 = \"101\";
code_rwr0 = <f0_rwr0,f1_rwr0,f2_rwr0,f3_rwr0,f4_rwr0,f5_rwr0,f6_rwr0>;
null = DATAOUT_FORMA_WB0.write(code_rwr0);"}
}
,"LHUm"{variable{"wire [31:0] bigE_word;
wire [31:0] addr;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] cycle;
wire [26:0] zero27b;
wire [1:0] f0_rrd0;
wire [2:0] f1_rrd0;
wire [31:0] f2_rrd0;
wire [31:0] f3_rrd0;
wire [31:0] f4_rrd0;
wire [31:0] f5_rrd0;
wire [2:0] f6_rrd0;
wire [135:0] code_rrd0;
wire [1:0] f0_fwd0;
wire [2:0] f1_fwd0;
wire [31:0] f2_fwd0;
wire [31:0] f3_fwd0;
wire [31:0] f4_fwd0;
wire [31:0] f5_fwd0;
wire [2:0] f6_fwd0;
wire [135:0] code_fwd0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);

cycle = CYCLEWIRE_FORMA_ID.read();
zero27b = \"000000000000000000000000000\";
f0_rrd0 = \"00\";
f1_rrd0 = \"000\";
f2_rrd0 = <zero27b,rs>;
f3_rrd0 = tmp_source0;
f4_rrd0 = cycle;
f5_rrd0 = tmp_pc;
f6_rrd0 = \"001\";
code_rrd0 = <f0_rrd0,f1_rrd0,f2_rrd0,f3_rrd0,f4_rrd0,f5_rrd0,f6_rrd0>;
null = DATAOUT_FORMA_ID0.write(code_rrd0);

f0_fwd0 = \"00\";
f1_fwd0 = \"011\";
f2_fwd0 = <zero27b,rs>;
f3_fwd0 = source0;
f4_fwd0 = cycle;
f5_fwd0 = tmp_pc;
f6_fwd0 = \"001\";
code_fwd0 = <f0_fwd0,f1_fwd0,f2_fwd0,f3_fwd0,f4_fwd0,f5_fwd0,f6_fwd0>;
null = DATAOUT_FORMA_ID1.write(code_fwd0);"},
clk(3){"wire [3:0] flag;
wire [31:0] cycle;
wire ctrlwire_ex0;
wire cond_ex0;
wire [1:0] f0_ex0;
wire [2:0] f1_ex0;
wire [31:0] f2_ex0;
wire [31:0] f3_ex0;
wire [31:0] f4_ex0;
wire [31:0] f5_ex0;
wire [2:0] f6_ex0;
wire [135:0] code_ex0;
wire ctrlwire_ex1;
wire cond_ex1;
wire ctrlwire_ex2;
wire cond_ex2;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);

cycle = CYCLEWIRE_FORMA_EX.read();
ctrlwire_ex0 = CTRLWIRE_FORMA_EX0.read();
cond_ex0 = ctrlwire_ex0 == '1';
f0_ex0 = \"10\";
f1_ex0 = \"100\";
f2_ex0 = \"00000000000000000000000000000000\";
f3_ex0 = \"00000000000000000000000000000000\";
f4_ex0 = cycle;
f5_ex0 = tmp_pc;
f6_ex0 = \"010\";
code_ex0 = <f0_ex0,f1_ex0,f2_ex0,f3_ex0,f4_ex0,f5_ex0,f6_ex0>;
null = [cond_ex0]DATAOUT_FORMA_EX0.write(code_ex0);

ctrlwire_ex1 = CTRLWIRE_FORMA_EX1.read();
cond_ex1 = ctrlwire_ex1 == '1';
null = [cond_ex1]DATAOUT_FORMA_EX1.write(code_ex0);

ctrlwire_ex2 = CTRLWIRE_FORMA_EX2.read();
cond_ex2 = ctrlwire_ex2 == '1';
null = [cond_ex2]DATAOUT_FORMA_EX2.write(code_ex0);"},
clk(4){"wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire [31:0] result;
wire  addr_err;
wire [31:0] cycle;
wire ctrlwire_m10;
wire cond_m10;
wire [1:0] f0_m10;
wire [2:0] f1_m10;
wire [31:0] f2_m10;
wire [31:0] f3_m10;
wire [31:0] f4_m10;
wire [31:0] f5_m10;
wire [2:0] f6_m10;
wire [135:0] code_m10;
wire ctrlwire_m11;
wire cond_m11;
wire ctrlwire_m12;
wire cond_m12;
wire [1:0] f0_mrd;
wire [2:0] f1_mrd;
wire [31:0] f2_mrd;
wire [31:0] f3_mrd;
wire [31:0] f4_mrd;
wire [31:0] f5_mrd;
wire [2:0] f6_mrd;
wire [135:0] code_mrd;

<result,addr_err> = Dmem.ldu_16(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3,byte2,byte1,byte0>;
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);

cycle = CYCLEWIRE_FORMA_M1.read();
ctrlwire_m10 = CTRLWIRE_FORMA_M10.read();
cond_m10 = ctrlwire_m10 == '1';
f0_m10 = \"10\";
f1_m10 = \"001\";
f2_m10 = \"00000000000000000000000000000000\";
f3_m10 = \"00000000000000000000000000000000\";
f4_m10 = cycle;
f5_m10 = tmp_pc;
f6_m10 = \"011\";
code_m10 = <f0_m10,f1_m10,f2_m10,f3_m10,f4_m10,f5_m10,f6_m10>;
null = [cond_m10]DATAOUT_FORMA_M10.write(code_m10);

ctrlwire_m11 = CTRLWIRE_FORMA_M11.read();
cond_m11 = ctrlwire_m11 == '1';
null = [cond_m11]DATAOUT_FORMA_M11.write(code_m10);

ctrlwire_m12 = CTRLWIRE_FORMA_M12.read();
cond_m12 = ctrlwire_m12 == '1';
null = [cond_m12]DATAOUT_FORMA_M12.write(code_m10);

f0_mrd = \"00\";
f1_mrd = \"001\";
f2_mrd = addr;
f3_mrd = bigE_word;
f4_mrd = cycle;
f5_mrd = tmp_pc;
f6_mrd = \"011\";
code_mrd = <f0_mrd,f1_mrd,f2_mrd,f3_mrd,f4_mrd,f5_mrd,f6_mrd>;
null = DATAOUT_FORMA_M13.write(code_mrd);"},
clk(5){"wire [31:0] cycle;
wire ctrlwire_m20;
wire cond_m20;
wire [1:0] f0_m20;
wire [2:0] f1_m20;
wire [31:0] f2_m20;
wire [31:0] f3_m20;
wire [31:0] f4_m20;
wire [31:0] f5_m20;
wire [2:0] f6_m20;
wire [135:0] code_m20;
wire ctrlwire_m21;
wire cond_m21;
wire ctrlwire_m22;
wire cond_m22;
wire ctrlwire_m23;
wire cond_m23;

null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);

cycle = CYCLEWIRE_FORMA_M2.read();
ctrlwire_m20 = CTRLWIRE_FORMA_M20.read();
cond_m20 = ctrlwire_m20 == '1';
f0_m20 = \"10\";
f1_m20 = \"001\";
f2_m20 = \"00000000000000000000000000000000\";
f3_m20 = \"00000000000000000000000000000000\";
f4_m20 = cycle;
f5_m20 = tmp_pc;
f6_m20 = \"100\";
code_m20 = <f0_m20,f1_m20,f2_m20,f3_m20,f4_m20,f5_m20,f6_m20>;
null = [cond_m20]DATAOUT_FORMA_M20.write(code_m20);

ctrlwire_m21 = CTRLWIRE_FORMA_M21.read();
cond_m21 = ctrlwire_m21 == '1';
null = [cond_m21]DATAOUT_FORMA_M21.write(code_m20);

ctrlwire_m22 = CTRLWIRE_FORMA_M22.read();
cond_m22 = ctrlwire_m22 == '1';
null = [cond_m22]DATAOUT_FORMA_M22.write(code_m20);

ctrlwire_m23 = CTRLWIRE_FORMA_M23.read();
cond_m23 = ctrlwire_m23 == '1';
null = [cond_m23]DATAOUT_FORMA_M23.write(code_m20);"},
clk(6){"wire [31:0] cycle;
wire [26:0] zero27b;
wire [1:0] f0_rwr0;
wire [2:0] f1_rwr0;
wire [31:0] f2_rwr0;
wire [31:0] f3_rwr0;
wire [31:0] f4_rwr0;
wire [31:0] f5_rwr0;
wire [2:0] f6_rwr0;
wire [135:0] code_rwr0;

null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);

cycle = CYCLEWIRE_FORMA_WB.read();
zero27b = \"000000000000000000000000000\";
f0_rwr0 = \"01\";
f1_rwr0 = \"000\";
f2_rwr0 = <zero27b,rt>;
f3_rwr0 = bigE_word;
f4_rwr0 = cycle;
f5_rwr0 = tmp_pc;
f6_rwr0 = \"101\";
code_rwr0 = <f0_rwr0,f1_rwr0,f2_rwr0,f3_rwr0,f4_rwr0,f5_rwr0,f6_rwr0>;
null = DATAOUT_FORMA_WB0.write(code_rwr0);"}
}
,"LWm"{variable{"wire [31:0] bigE_word;
wire [31:0] addr;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] cycle;
wire [26:0] zero27b;
wire [1:0] f0_rrd0;
wire [2:0] f1_rrd0;
wire [31:0] f2_rrd0;
wire [31:0] f3_rrd0;
wire [31:0] f4_rrd0;
wire [31:0] f5_rrd0;
wire [2:0] f6_rrd0;
wire [135:0] code_rrd0;
wire [1:0] f0_fwd0;
wire [2:0] f1_fwd0;
wire [31:0] f2_fwd0;
wire [31:0] f3_fwd0;
wire [31:0] f4_fwd0;
wire [31:0] f5_fwd0;
wire [2:0] f6_fwd0;
wire [135:0] code_fwd0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);

cycle = CYCLEWIRE_FORMA_ID.read();
zero27b = \"000000000000000000000000000\";
f0_rrd0 = \"00\";
f1_rrd0 = \"000\";
f2_rrd0 = <zero27b,rs>;
f3_rrd0 = tmp_source0;
f4_rrd0 = cycle;
f5_rrd0 = tmp_pc;
f6_rrd0 = \"001\";
code_rrd0 = <f0_rrd0,f1_rrd0,f2_rrd0,f3_rrd0,f4_rrd0,f5_rrd0,f6_rrd0>;
null = DATAOUT_FORMA_ID0.write(code_rrd0);

f0_fwd0 = \"00\";
f1_fwd0 = \"011\";
f2_fwd0 = <zero27b,rs>;
f3_fwd0 = source0;
f4_fwd0 = cycle;
f5_fwd0 = tmp_pc;
f6_fwd0 = \"001\";
code_fwd0 = <f0_fwd0,f1_fwd0,f2_fwd0,f3_fwd0,f4_fwd0,f5_fwd0,f6_fwd0>;
null = DATAOUT_FORMA_ID1.write(code_fwd0);"},
clk(3){"wire [3:0] flag;
wire [31:0] cycle;
wire ctrlwire_ex0;
wire cond_ex0;
wire [1:0] f0_ex0;
wire [2:0] f1_ex0;
wire [31:0] f2_ex0;
wire [31:0] f3_ex0;
wire [31:0] f4_ex0;
wire [31:0] f5_ex0;
wire [2:0] f6_ex0;
wire [135:0] code_ex0;
wire ctrlwire_ex1;
wire cond_ex1;
wire ctrlwire_ex2;
wire cond_ex2;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);
cycle = CYCLEWIRE_FORMA_EX.read();
ctrlwire_ex0 = CTRLWIRE_FORMA_EX0.read();
cond_ex0 = ctrlwire_ex0 == '1';
f0_ex0 = \"10\";
f1_ex0 = \"100\";
f2_ex0 = \"00000000000000000000000000000000\";
f3_ex0 = \"00000000000000000000000000000000\";
f4_ex0 = cycle;
f5_ex0 = tmp_pc;
f6_ex0 = \"010\";
code_ex0 = <f0_ex0,f1_ex0,f2_ex0,f3_ex0,f4_ex0,f5_ex0,f6_ex0>;
null = [cond_ex0]DATAOUT_FORMA_EX0.write(code_ex0);

ctrlwire_ex1 = CTRLWIRE_FORMA_EX1.read();
cond_ex1 = ctrlwire_ex1 == '1';
null = [cond_ex1]DATAOUT_FORMA_EX1.write(code_ex0);

ctrlwire_ex2 = CTRLWIRE_FORMA_EX2.read();
cond_ex2 = ctrlwire_ex2 == '1';
null = [cond_ex2]DATAOUT_FORMA_EX2.write(code_ex0);"},
clk(4){"wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire [31:0] result;
wire  addr_err;
wire [31:0] cycle;
wire ctrlwire_m10;
wire cond_m10;
wire [1:0] f0_m10;
wire [2:0] f1_m10;
wire [31:0] f2_m10;
wire [31:0] f3_m10;
wire [31:0] f4_m10;
wire [31:0] f5_m10;
wire [2:0] f6_m10;
wire [135:0] code_m10;
wire ctrlwire_m11;
wire cond_m11;
wire ctrlwire_m12;
wire cond_m12;
wire [1:0] f0_mrd;
wire [2:0] f1_mrd;
wire [31:0] f2_mrd;
wire [31:0] f3_mrd;
wire [31:0] f4_mrd;
wire [31:0] f5_mrd;
wire [2:0] f6_mrd;
wire [135:0] code_mrd;

<result,addr_err> = Dmem.ld_32(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3,byte2,byte1,byte0>;
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);
cycle = CYCLEWIRE_FORMA_M1.read();
ctrlwire_m10 = CTRLWIRE_FORMA_M10.read();
cond_m10 = ctrlwire_m10 == '1';
f0_m10 = \"10\";
f1_m10 = \"001\";
f2_m10 = \"00000000000000000000000000000000\";
f3_m10 = \"00000000000000000000000000000000\";
f4_m10 = cycle;
f5_m10 = tmp_pc;
f6_m10 = \"011\";
code_m10 = <f0_m10,f1_m10,f2_m10,f3_m10,f4_m10,f5_m10,f6_m10>;
null = [cond_m10]DATAOUT_FORMA_M10.write(code_m10);

ctrlwire_m11 = CTRLWIRE_FORMA_M11.read();
cond_m11 = ctrlwire_m11 == '1';
null = [cond_m11]DATAOUT_FORMA_M11.write(code_m10);

ctrlwire_m12 = CTRLWIRE_FORMA_M12.read();
cond_m12 = ctrlwire_m12 == '1';
null = [cond_m12]DATAOUT_FORMA_M12.write(code_m10);

f0_mrd = \"00\";
f1_mrd = \"001\";
f2_mrd = addr;
f3_mrd = bigE_word;
f4_mrd = cycle;
f5_mrd = tmp_pc;
f6_mrd = \"011\";
code_mrd = <f0_mrd,f1_mrd,f2_mrd,f3_mrd,f4_mrd,f5_mrd,f6_mrd>;
null = DATAOUT_FORMA_M13.write(code_mrd);"},
clk(5){"wire [31:0] cycle;
wire ctrlwire_m20;
wire cond_m20;
wire [1:0] f0_m20;
wire [2:0] f1_m20;
wire [31:0] f2_m20;
wire [31:0] f3_m20;
wire [31:0] f4_m20;
wire [31:0] f5_m20;
wire [2:0] f6_m20;
wire [135:0] code_m20;
wire ctrlwire_m21;
wire cond_m21;
wire ctrlwire_m22;
wire cond_m22;
wire ctrlwire_m23;
wire cond_m23;

null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);

cycle = CYCLEWIRE_FORMA_M2.read();
ctrlwire_m20 = CTRLWIRE_FORMA_M20.read();
cond_m20 = ctrlwire_m20 == '1';
f0_m20 = \"10\";
f1_m20 = \"001\";
f2_m20 = \"00000000000000000000000000000000\";
f3_m20 = \"00000000000000000000000000000000\";
f4_m20 = cycle;
f5_m20 = tmp_pc;
f6_m20 = \"100\";
code_m20 = <f0_m20,f1_m20,f2_m20,f3_m20,f4_m20,f5_m20,f6_m20>;
null = [cond_m20]DATAOUT_FORMA_M20.write(code_m20);

ctrlwire_m21 = CTRLWIRE_FORMA_M21.read();
cond_m21 = ctrlwire_m21 == '1';
null = [cond_m21]DATAOUT_FORMA_M21.write(code_m20);

ctrlwire_m22 = CTRLWIRE_FORMA_M22.read();
cond_m22 = ctrlwire_m22 == '1';
null = [cond_m22]DATAOUT_FORMA_M22.write(code_m20);

ctrlwire_m23 = CTRLWIRE_FORMA_M23.read();
cond_m23 = ctrlwire_m23 == '1';
null = [cond_m23]DATAOUT_FORMA_M23.write(code_m20);"},
clk(6){"wire [31:0] cycle;
wire [26:0] zero27b;
wire [1:0] f0_rwr0;
wire [2:0] f1_rwr0;
wire [31:0] f2_rwr0;
wire [31:0] f3_rwr0;
wire [31:0] f4_rwr0;
wire [31:0] f5_rwr0;
wire [2:0] f6_rwr0;
wire [135:0] code_rwr0;

null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);
cycle = CYCLEWIRE_FORMA_WB.read();
zero27b = \"000000000000000000000000000\";
f0_rwr0 = \"01\";
f1_rwr0 = \"000\";
f2_rwr0 = <zero27b,rt>;
f3_rwr0 = bigE_word;
f4_rwr0 = cycle;
f5_rwr0 = tmp_pc;
f6_rwr0 = \"101\";
code_rwr0 = <f0_rwr0,f1_rwr0,f2_rwr0,f3_rwr0,f4_rwr0,f5_rwr0,f6_rwr0>;
null = DATAOUT_FORMA_WB0.write(code_rwr0);"}
}
,"DLWm"{variable{"wire [31:0] bigE_word0;
wire [31:0] bigE_word1;
wire [4:0] nextRT;
wire [31:0] addr2;
wire [31:0] tmp_pc;
wire [31:0] addr1;
wire[31:0] source0;
wire[31:0] source1;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] cycle;
wire [26:0] zero27b;
wire [1:0] f0_rrd0;
wire [2:0] f1_rrd0;
wire [31:0] f2_rrd0;
wire [31:0] f3_rrd0;
wire [31:0] f4_rrd0;
wire [31:0] f5_rrd0;
wire [2:0] f6_rrd0;
wire [135:0] code_rrd0;
wire [1:0] f0_fwd0;
wire [2:0] f1_fwd0;
wire [31:0] f2_fwd0;
wire [31:0] f3_fwd0;
wire [31:0] f4_fwd0;
wire [31:0] f5_fwd0;
wire [2:0] f6_fwd0;
wire [135:0] code_fwd0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);

cycle = CYCLEWIRE_FORMA_ID.read();
zero27b = \"000000000000000000000000000\";
f0_rrd0 = \"00\";
f1_rrd0 = \"000\";
f2_rrd0 = <zero27b,rs>;
f3_rrd0 = tmp_source0;
f4_rrd0 = cycle;
f5_rrd0 = tmp_pc;
f6_rrd0 = \"001\";
code_rrd0 = <f0_rrd0,f1_rrd0,f2_rrd0,f3_rrd0,f4_rrd0,f5_rrd0,f6_rrd0>;
null = DATAOUT_FORMA_ID0.write(code_rrd0);

f0_fwd0 = \"00\";
f1_fwd0 = \"011\";
f2_fwd0 = <zero27b,rs>;
f3_fwd0 = source0;
f4_fwd0 = cycle;
f5_fwd0 = tmp_pc;
f6_fwd0 = \"001\";
code_fwd0 = <f0_fwd0,f1_fwd0,f2_fwd0,f3_fwd0,f4_fwd0,f5_fwd0,f6_fwd0>;
null = DATAOUT_FORMA_ID1.write(code_fwd0);"},
clk(3){"wire [3:0] tmpRT;
wire [3:0] flag;
wire  one;
wire [31:0] cycle;
wire ctrlwire_ex0;
wire cond_ex0;
wire [1:0] f0_ex0;
wire [2:0] f1_ex0;
wire [31:0] f2_ex0;
wire [31:0] f3_ex0;
wire [31:0] f4_ex0;
wire [31:0] f5_ex0;
wire [2:0] f6_ex0;
wire [135:0] code_ex0;
wire ctrlwire_ex1;
wire cond_ex1;
wire ctrlwire_ex2;
wire cond_ex2;

<addr1,flag> = ALU1.add(source0,source1);
one = '1';
tmpRT = rt[4:1];
nextRT = <tmpRT,one>;
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);
null = FWUL0.lock2(nextRT);
null = FWUL1.lock2(nextRT);
null = FWUL2.lock2(nextRT);
null = FWUL3.lock2(nextRT);

cycle = CYCLEWIRE_FORMA_EX.read();
ctrlwire_ex0 = CTRLWIRE_FORMA_EX0.read();
cond_ex0 = ctrlwire_ex0 == '1';
f0_ex0 = \"10\";
f1_ex0 = \"100\";
f2_ex0 = \"00000000000000000000000000000000\";
f3_ex0 = \"00000000000000000000000000000000\";
f4_ex0 = cycle;
f5_ex0 = tmp_pc;
f6_ex0 = \"010\";
code_ex0 = <f0_ex0,f1_ex0,f2_ex0,f3_ex0,f4_ex0,f5_ex0,f6_ex0>;
null = [cond_ex0]DATAOUT_FORMA_EX0.write(code_ex0);

ctrlwire_ex1 = CTRLWIRE_FORMA_EX1.read();
cond_ex1 = ctrlwire_ex1 == '1';
null = [cond_ex1]DATAOUT_FORMA_EX1.write(code_ex0);

ctrlwire_ex2 = CTRLWIRE_FORMA_EX2.read();
cond_ex2 = ctrlwire_ex2 == '1';
null = [cond_ex2]DATAOUT_FORMA_EX2.write(code_ex0);"},
clk(4){"wire [31:0] four32bit;
wire  cout;
wire [7:0] byte2;
wire [7:0] byte3;
wire  cin;
wire [7:0] byte1;
wire [31:0] result1;
wire  addr_err;
wire [7:0] byte0;
wire [31:0] cycle;
wire ctrlwire_m10;
wire cond_m10;
wire [1:0] f0_m10;
wire [2:0] f1_m10;
wire [31:0] f2_m10;
wire [31:0] f3_m10;
wire [31:0] f4_m10;
wire [31:0] f5_m10;
wire [2:0] f6_m10;
wire [135:0] code_m10;
wire ctrlwire_m11;
wire cond_m11;
wire ctrlwire_m12;
wire cond_m12;
wire [1:0] f0_mrd;
wire [2:0] f1_mrd;
wire [31:0] f2_mrd;
wire [31:0] f3_mrd;
wire [31:0] f4_mrd;
wire [31:0] f5_mrd;
wire [2:0] f6_mrd;
wire [135:0] code_mrd;

cin = '0';
four32bit = \"00000000000000000000000000000100\";
<result1,addr_err> = Dmem.ld_32(addr1);
byte0 = result1[31:24];
byte1 = result1[23:16];
byte2 = result1[15:8];
byte3 = result1[7:0];
bigE_word0 = <byte3,byte2,byte1,byte0>;
null = FWUL0.forward3(rt,bigE_word0);
null = FWUL1.forward3(rt,bigE_word0);
null = FWUL2.forward3(rt,bigE_word0);
null = FWUL3.forward3(rt,bigE_word0);
<addr2,cout> = ADDER2.adc(addr1,four32bit,cin);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);
null = FWUL0.lock4(nextRT);
null = FWUL1.lock4(nextRT);
null = FWUL2.lock4(nextRT);
null = FWUL3.lock4(nextRT);

cycle = CYCLEWIRE_FORMA_M1.read();
ctrlwire_m10 = CTRLWIRE_FORMA_M10.read();
cond_m10 = ctrlwire_m10 == '1';
f0_m10 = \"10\";
f1_m10 = \"001\";
f2_m10 = \"00000000000000000000000000000000\";
f3_m10 = \"00000000000000000000000000000000\";
f4_m10 = cycle;
f5_m10 = tmp_pc;
f6_m10 = \"011\";
code_m10 = <f0_m10,f1_m10,f2_m10,f3_m10,f4_m10,f5_m10,f6_m10>;
null = [cond_m10]DATAOUT_FORMA_M10.write(code_m10);

ctrlwire_m11 = CTRLWIRE_FORMA_M11.read();
cond_m11 = ctrlwire_m11 == '1';
null = [cond_m11]DATAOUT_FORMA_M11.write(code_m10);

ctrlwire_m12 = CTRLWIRE_FORMA_M12.read();
cond_m12 = ctrlwire_m12 == '1';
null = [cond_m12]DATAOUT_FORMA_M12.write(code_m10);

f0_mrd = \"00\";
f1_mrd = \"001\";
f2_mrd = addr1;
f3_mrd = bigE_word0;
f4_mrd = cycle;
f5_mrd = tmp_pc;
f6_mrd = \"011\";
code_mrd = <f0_mrd,f1_mrd,f2_mrd,f3_mrd,f4_mrd,f5_mrd,f6_mrd>;
null = DATAOUT_FORMA_M13.write(code_mrd);"},
clk(5){"wire [31:0] result2;
wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire  addr_err;
wire [31:0] cycle;
wire ctrlwire_m20;
wire cond_m20;
wire [1:0] f0_m20;
wire [2:0] f1_m20;
wire [31:0] f2_m20;
wire [31:0] f3_m20;
wire [31:0] f4_m20;
wire [31:0] f5_m20;
wire [2:0] f6_m20;
wire [135:0] code_m20;
wire ctrlwire_m21;
wire cond_m21;
wire ctrlwire_m22;
wire cond_m22;
wire ctrlwire_m23;
wire cond_m23;
wire [1:0] f0_mrd;
wire [2:0] f1_mrd;
wire [31:0] f2_mrd;
wire [31:0] f3_mrd;
wire [31:0] f4_mrd;
wire [31:0] f5_mrd;
wire [2:0] f6_mrd;
wire [135:0] code_mrd;

<result2,addr_err> = Dmem.ld_32(addr2);
byte0 = result2[31:24];
byte1 = result2[23:16];
byte2 = result2[15:8];
byte3 = result2[7:0];
bigE_word1 = <byte3,byte2,byte1,byte0>;
null = FWUL0.forward5(rt,bigE_word0);
null = FWUL1.forward5(rt,bigE_word0);
null = FWUL2.forward5(rt,bigE_word0);
null = FWUL3.forward5(rt,bigE_word0);
null = FWUL0.forward6(nextRT,bigE_word1);
null = FWUL1.forward6(nextRT,bigE_word1);
null = FWUL2.forward6(nextRT,bigE_word1);
null = FWUL3.forward6(nextRT,bigE_word1);
null = FWUL0.lock5(nextRT);
null = FWUL1.lock5(nextRT);
null = FWUL2.lock5(nextRT);
null = FWUL3.lock5(nextRT);

cycle = CYCLEWIRE_FORMA_M2.read();
ctrlwire_m20 = CTRLWIRE_FORMA_M20.read();
cond_m20 = ctrlwire_m20 == '1';
f0_m20 = \"10\";
f1_m20 = \"001\";
f2_m20 = \"00000000000000000000000000000000\";
f3_m20 = \"00000000000000000000000000000000\";
f4_m20 = cycle;
f5_m20 = tmp_pc;
f6_m20 = \"100\";
code_m20 = <f0_m20,f1_m20,f2_m20,f3_m20,f4_m20,f5_m20,f6_m20>;
null = [cond_m20]DATAOUT_FORMA_M20.write(code_m20);

ctrlwire_m21 = CTRLWIRE_FORMA_M21.read();
cond_m21 = ctrlwire_m21 == '1';
null = [cond_m21]DATAOUT_FORMA_M21.write(code_m20);

ctrlwire_m22 = CTRLWIRE_FORMA_M22.read();
cond_m22 = ctrlwire_m22 == '1';
null = [cond_m22]DATAOUT_FORMA_M22.write(code_m20);

ctrlwire_m23 = CTRLWIRE_FORMA_M23.read();
cond_m23 = ctrlwire_m23 == '1';
null = [cond_m23]DATAOUT_FORMA_M23.write(code_m20);

f0_mrd = \"00\";
f1_mrd = \"001\";
f2_mrd = addr2;
f3_mrd = bigE_word0;
f4_mrd = cycle;
f5_mrd = tmp_pc;
f6_mrd = \"100\";
code_mrd = <f0_mrd,f1_mrd,f2_mrd,f3_mrd,f4_mrd,f5_mrd,f6_mrd>;
null = DATAOUT_FORMA_M24.write(code_mrd);"},
clk(6){"wire [31:0] cycle;
wire [26:0] zero27b;
wire [1:0] f0_rwr0;
wire [2:0] f1_rwr0;
wire [31:0] f2_rwr0;
wire [31:0] f3_rwr0;
wire [31:0] f4_rwr0;
wire [31:0] f5_rwr0;
wire [2:0] f6_rwr0;
wire [135:0] code_rwr0;
wire [1:0] f0_rwr1;
wire [2:0] f1_rwr1;
wire [31:0] f2_rwr1;
wire [31:0] f3_rwr1;
wire [31:0] f4_rwr1;
wire [31:0] f5_rwr1;
wire [2:0] f6_rwr1;
wire [135:0] code_rwr1;

null = FWUL0.forward7(rt,bigE_word0);
null = FWUL1.forward7(rt,bigE_word0);
null = FWUL2.forward7(rt,bigE_word0);
null = FWUL3.forward7(rt,bigE_word0);
null = FWUL0.forward8(nextRT,bigE_word1);
null = FWUL1.forward8(nextRT,bigE_word1);
null = FWUL2.forward8(nextRT,bigE_word1);
null = FWUL3.forward8(nextRT,bigE_word1);
null = GPR.write0(rt,bigE_word0);
null = GPR.write1(nextRT,bigE_word1);

cycle = CYCLEWIRE_FORMA_WB.read();
zero27b = \"000000000000000000000000000\";
f0_rwr0 = \"01\";
f1_rwr0 = \"000\";
f2_rwr0 = <zero27b,rt>;
f3_rwr0 = bigE_word0;
f4_rwr0 = cycle;
f5_rwr0 = tmp_pc;
f6_rwr0 = \"101\";
code_rwr0 = <f0_rwr0,f1_rwr0,f2_rwr0,f3_rwr0,f4_rwr0,f5_rwr0,f6_rwr0>;
null = DATAOUT_FORMA_WB0.write(code_rwr0);

f0_rwr1 = \"01\";
f1_rwr1 = \"000\";
f2_rwr1 = <zero27b,nextRT>;
f3_rwr1 = bigE_word1;
f4_rwr1 = cycle;
f5_rwr1 = tmp_pc;
f6_rwr1 = \"101\";
code_rwr1 = <f0_rwr1,f1_rwr1,f2_rwr1,f3_rwr1,f4_rwr1,f5_rwr1,f6_rwr1>;
null = DATAOUT_FORMA_WB1.write(code_rwr1);"}
}
,"LWLm"{variable{"wire [31:0] addr;
wire [31:0] source2;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;
wire [31:0] cycle;
wire [26:0] zero27b;
wire [1:0] f0_rrd0;
wire [2:0] f1_rrd0;
wire [31:0] f2_rrd0;
wire [31:0] f3_rrd0;
wire [31:0] f4_rrd0;
wire [31:0] f5_rrd0;
wire [2:0] f6_rrd0;
wire [135:0] code_rrd0;
wire [1:0] f0_fwd0;
wire [2:0] f1_fwd0;
wire [31:0] f2_fwd0;
wire [31:0] f3_fwd0;
wire [31:0] f4_fwd0;
wire [31:0] f5_fwd0;
wire [2:0] f6_fwd0;
wire [135:0] code_fwd0;
wire [1:0] f0_rrd1;
wire [2:0] f1_rrd1;
wire [31:0] f2_rrd1;
wire [31:0] f3_rrd1;
wire [31:0] f4_rrd1;
wire [31:0] f5_rrd1;
wire [2:0] f6_rrd1;
wire [135:0] code_rrd1;
wire [1:0] f0_fwd1;
wire [2:0] f1_fwd1;
wire [31:0] f2_fwd1;
wire [31:0] f3_fwd1;
wire [31:0] f4_fwd1;
wire [31:0] f5_fwd1;
wire [2:0] f6_fwd1;
wire [135:0] code_fwd1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source2 = EXT1.sign(imm);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);

cycle = CYCLEWIRE_FORMA_ID.read();
zero27b = \"000000000000000000000000000\";
f0_rrd0 = \"00\";
f1_rrd0 = \"000\";
f2_rrd0 = <zero27b,rs>;
f3_rrd0 = tmp_source0;
f4_rrd0 = cycle;
f5_rrd0 = tmp_pc;
f6_rrd0 = \"001\";
code_rrd0 = <f0_rrd0,f1_rrd0,f2_rrd0,f3_rrd0,f4_rrd0,f5_rrd0,f6_rrd0>;
null = DATAOUT_FORMA_ID0.write(code_rrd0);

f0_fwd0 = \"00\";
f1_fwd0 = \"011\";
f2_fwd0 = <zero27b,rs>;
f3_fwd0 = source0;
f4_fwd0 = cycle;
f5_fwd0 = tmp_pc;
f6_fwd0 = \"001\";
code_fwd0 = <f0_fwd0,f1_fwd0,f2_fwd0,f3_fwd0,f4_fwd0,f5_fwd0,f6_fwd0>;
null = DATAOUT_FORMA_ID1.write(code_fwd0);

f0_rrd1 = \"00\";
f1_rrd1 = \"000\";
f2_rrd1 = <zero27b,rt>;
f3_rrd1 = tmp_source1;
f4_rrd1 = cycle;
f5_rrd1 = tmp_pc;
f6_rrd1 = \"001\";
code_rrd1 = <f0_rrd1,f1_rrd1,f2_rrd1,f3_rrd1,f4_rrd1,f5_rrd1,f6_rrd1>;
null = DATAOUT_FORMA_ID2.write(code_rrd1);

f0_fwd1 = \"00\";
f1_fwd1 = \"011\";
f2_fwd1 = <zero27b,rs>;
f3_fwd1 = source1;
f4_fwd1 = cycle;
f5_fwd1 = tmp_pc;
f6_fwd1 = \"001\";
code_fwd1 = <f0_fwd1,f1_fwd1,f2_fwd1,f3_fwd1,f4_fwd1,f5_fwd1,f6_fwd1>;
null = DATAOUT_FORMA_ID3.write(code_fwd1);"},
clk(3){"wire [3:0] flag;
wire [31:0] cycle;
wire ctrlwire_ex0;
wire cond_ex0;
wire [1:0] f0_ex0;
wire [2:0] f1_ex0;
wire [31:0] f2_ex0;
wire [31:0] f3_ex0;
wire [31:0] f4_ex0;
wire [31:0] f5_ex0;
wire [2:0] f6_ex0;
wire [135:0] code_ex0;
wire ctrlwire_ex1;
wire cond_ex1;
wire ctrlwire_ex2;
wire cond_ex2;

<addr,flag> = ALU1.add(source0,source2);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);
cycle = CYCLEWIRE_FORMA_EX.read();
ctrlwire_ex0 = CTRLWIRE_FORMA_EX0.read();
cond_ex0 = ctrlwire_ex0 == '1';
f0_ex0 = \"10\";
f1_ex0 = \"100\";
f2_ex0 = \"00000000000000000000000000000000\";
f3_ex0 = \"00000000000000000000000000000000\";
f4_ex0 = cycle;
f5_ex0 = tmp_pc;
f6_ex0 = \"010\";
code_ex0 = <f0_ex0,f1_ex0,f2_ex0,f3_ex0,f4_ex0,f5_ex0,f6_ex0>;
null = [cond_ex0]DATAOUT_FORMA_EX0.write(code_ex0);

ctrlwire_ex1 = CTRLWIRE_FORMA_EX1.read();
cond_ex1 = ctrlwire_ex1 == '1';
null = [cond_ex1]DATAOUT_FORMA_EX1.write(code_ex0);

ctrlwire_ex2 = CTRLWIRE_FORMA_EX2.read();
cond_ex2 = ctrlwire_ex2 == '1';
null = [cond_ex2]DATAOUT_FORMA_EX2.write(code_ex0);"},
clk(4){"wire [31:0] result0;
wire [31:0] target;
wire [7:0] byte2;
wire [7:0] data1;
wire [31:0] result1;
wire [31:0] bigE_data;
wire [7:0] reg2;
wire [31:0] result3;
wire [7:0] reg0;
wire [7:0] reg1;
wire [31:0] result2;
wire [7:0] byte3;
wire [7:0] byte0;
wire [1:0] zero2;
wire [1:0] vAddr10;
wire  addr_err;
wire [7:0] data2;
wire [31:0] data;
wire [7:0] data0;
wire [7:0] byte1;
wire [29:0] addr_mask;
wire [31:0] cycle;
wire ctrlwire_m10;
wire cond_m10;
wire [1:0] f0_m10;
wire [2:0] f1_m10;
wire [31:0] f2_m10;
wire [31:0] f3_m10;
wire [31:0] f4_m10;
wire [31:0] f5_m10;
wire [2:0] f6_m10;
wire [135:0] code_m10;
wire ctrlwire_m11;
wire cond_m11;
wire ctrlwire_m12;
wire cond_m12;
wire [1:0] f0_mrd;
wire [2:0] f1_mrd;
wire [31:0] f2_mrd;
wire [31:0] f3_mrd;
wire [31:0] f4_mrd;
wire [31:0] f5_mrd;
wire [2:0] f6_mrd;
wire [135:0] code_mrd;

addr_mask = addr[31:2];
vAddr10 = addr[1:0];
zero2 = \"00\";
target = <addr_mask,zero2>;
<data,addr_err> = Dmem.ld_32(target);
byte0 = data[31:24];
byte1 = data[23:16];
byte2 = data[15:8];
byte3 = data[7:0];
bigE_data = <byte3,byte2,byte1,byte0>;
data2 = bigE_data[23:16];
data1 = bigE_data[15:8];
data0 = bigE_data[7:0];
reg2 = source1[23:16];
reg1 = source1[15:8];
reg0 = source1[7:0];
result0 = <data0,reg2,reg1,reg0>;
result1 = <data1,data0,reg1,reg0>;
result2 = <data2,data1,data0,reg0>;
result3 = bigE_data;
result = MUXw32p4.sel(result0,result1,result2,result3,vAddr10);
null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);

cycle = CYCLEWIRE_FORMA_M1.read();
ctrlwire_m10 = CTRLWIRE_FORMA_M10.read();
cond_m10 = ctrlwire_m10 == '1';
f0_m10 = \"10\";
f1_m10 = \"001\";
f2_m10 = \"00000000000000000000000000000000\";
f3_m10 = \"00000000000000000000000000000000\";
f4_m10 = cycle;
f5_m10 = tmp_pc;
f6_m10 = \"011\";
code_m10 = <f0_m10,f1_m10,f2_m10,f3_m10,f4_m10,f5_m10,f6_m10>;
null = [cond_m10]DATAOUT_FORMA_M10.write(code_m10);

ctrlwire_m11 = CTRLWIRE_FORMA_M11.read();
cond_m11 = ctrlwire_m11 == '1';
null = [cond_m11]DATAOUT_FORMA_M11.write(code_m10);

ctrlwire_m12 = CTRLWIRE_FORMA_M12.read();
cond_m12 = ctrlwire_m12 == '1';
null = [cond_m12]DATAOUT_FORMA_M12.write(code_m10);

f0_mrd = \"00\";
f1_mrd = \"001\";
f2_mrd = target;
f3_mrd = bigE_data;
f4_mrd = cycle;
f5_mrd = tmp_pc;
f6_mrd = \"011\";
code_mrd = <f0_mrd,f1_mrd,f2_mrd,f3_mrd,f4_mrd,f5_mrd,f6_mrd>;
null = DATAOUT_FORMA_M13.write(code_mrd);"},
clk(5){"wire [31:0] cycle;
wire ctrlwire_m20;
wire cond_m20;
wire [1:0] f0_m20;
wire [2:0] f1_m20;
wire [31:0] f2_m20;
wire [31:0] f3_m20;
wire [31:0] f4_m20;
wire [31:0] f5_m20;
wire [2:0] f6_m20;
wire [135:0] code_m20;
wire ctrlwire_m21;
wire cond_m21;
wire ctrlwire_m22;
wire cond_m22;
wire ctrlwire_m23;
wire cond_m23;

null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);

cycle = CYCLEWIRE_FORMA_M2.read();
ctrlwire_m20 = CTRLWIRE_FORMA_M20.read();
cond_m20 = ctrlwire_m20 == '1';
f0_m20 = \"10\";
f1_m20 = \"001\";
f2_m20 = \"00000000000000000000000000000000\";
f3_m20 = \"00000000000000000000000000000000\";
f4_m20 = cycle;
f5_m20 = tmp_pc;
f6_m20 = \"100\";
code_m20 = <f0_m20,f1_m20,f2_m20,f3_m20,f4_m20,f5_m20,f6_m20>;
null = [cond_m20]DATAOUT_FORMA_M20.write(code_m20);

ctrlwire_m21 = CTRLWIRE_FORMA_M21.read();
cond_m21 = ctrlwire_m21 == '1';
null = [cond_m21]DATAOUT_FORMA_M21.write(code_m20);

ctrlwire_m22 = CTRLWIRE_FORMA_M22.read();
cond_m22 = ctrlwire_m22 == '1';
null = [cond_m22]DATAOUT_FORMA_M22.write(code_m20);

ctrlwire_m23 = CTRLWIRE_FORMA_M23.read();
cond_m23 = ctrlwire_m23 == '1';
null = [cond_m23]DATAOUT_FORMA_M23.write(code_m20);"},
clk(6){"wire [31:0] cycle;
wire [26:0] zero27b;
wire [1:0] f0_rwr0;
wire [2:0] f1_rwr0;
wire [31:0] f2_rwr0;
wire [31:0] f3_rwr0;
wire [31:0] f4_rwr0;
wire [31:0] f5_rwr0;
wire [2:0] f6_rwr0;
wire [135:0] code_rwr0;

null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);

cycle = CYCLEWIRE_FORMA_WB.read();
zero27b = \"000000000000000000000000000\";
f0_rwr0 = \"01\";
f1_rwr0 = \"000\";
f2_rwr0 = <zero27b,rt>;
f3_rwr0 = result;
f4_rwr0 = cycle;
f5_rwr0 = tmp_pc;
f6_rwr0 = \"101\";
code_rwr0 = <f0_rwr0,f1_rwr0,f2_rwr0,f3_rwr0,f4_rwr0,f5_rwr0,f6_rwr0>;
null = DATAOUT_FORMA_WB0.write(code_rwr0);"}
}
,"LWRm"{variable{"wire [31:0] addr;
wire [31:0] source2;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source2 = EXT1.sign(imm);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source2);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire [31:0] result0;
wire [31:0] target;
wire [7:0] byte2;
wire [7:0] data1;
wire [31:0] result1;
wire [31:0] bigE_data;
wire [7:0] reg2;
wire [7:0] reg3;
wire [31:0] result3;
wire [7:0] reg1;
wire [31:0] result2;
wire [7:0] byte3;
wire [7:0] byte0;
wire [1:0] zero2;
wire [1:0] vAddr10;
wire  addr_err;
wire [7:0] data2;
wire [31:0] data;
wire [7:0] byte1;
wire [7:0] data3;
wire [29:0] addr_mask;

addr_mask = addr[31:2];
vAddr10 = addr[1:0];
zero2 = \"00\";
target = <addr_mask,zero2>;
<data,addr_err> = Dmem.ld_32(target);
byte0 = data[31:24];
byte1 = data[23:16];
byte2 = data[15:8];
byte3 = data[7:0];
bigE_data = <byte3,byte2,byte1,byte0>;
data3 = bigE_data[31:24];
data2 = bigE_data[23:16];
data1 = bigE_data[15:8];
reg3 = source1[31:24];
reg2 = source1[23:16];
reg1 = source1[15:8];
result3 = <reg3,reg2,reg1,data3>;
result2 = <reg3,reg2,data3,data2>;
result1 = <reg3,data3,data2,data1>;
result0 = bigE_data;
result = MUXw32p4.sel(result0,result1,result2,result3,vAddr10);
null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"SBm"{variable{"wire [31:0] addr;
wire [31:0] source2;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source2 = EXT1.sign(imm);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source2);"},
clk(4){""},
clk(5){"wire [31:0] LE_source1;
wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire  addr_err;

byte0 = source1[31:24];
byte1 = source1[23:16];
byte2 = source1[15:8];
byte3 = source1[7:0];
LE_source1 = <byte3,byte2,byte1,byte0>;
addr_err = Dmem.s_8(addr,LE_source1);"},
clk(6){""}
}
,"SHm"{variable{"wire [31:0] addr;
wire [31:0] source2;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source2 = EXT1.sign(imm);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source2);"},
clk(4){""},
clk(5){"wire [31:0] LE_source1;
wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire  addr_err;

byte0 = source1[31:24];
byte1 = source1[23:16];
byte2 = source1[15:8];
byte3 = source1[7:0];
LE_source1 = <byte3,byte2,byte1,byte0>;
addr_err = Dmem.s_16(addr,LE_source1);"},
clk(6){""}
}
,"SWm"{variable{"wire [31:0] addr;
wire [31:0] source2;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source2 = EXT1.sign(imm);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source2);"},
clk(4){""},
clk(5){"wire [31:0] LE_source1;
wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire  addr_err;

byte0 = source1[31:24];
byte1 = source1[23:16];
byte2 = source1[15:8];
byte3 = source1[7:0];
LE_source1 = <byte3,byte2,byte1,byte0>;
addr_err = Dmem.s_32(addr,LE_source1);"},
clk(6){""}
}
,"DSWm"{variable{"wire [31:0] source2;
wire [31:0] source3;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] addr2;
wire [31:0] tmp_pc;
wire [31:0] addr1;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [3:0] oldrt;
wire [31:0] tmp_source1;
wire [31:0] tmp_source3;
wire  one;
wire [4:0] rt2;
wire [31:0] tmp_source0;

one = '1';
oldrt = rt[4:1];
rt2 = <oldrt,one>;
tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
tmp_source3 = GPR.read2(rt2);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);
source2 = EXT1.sign(imm);
source3 = FWUL2.forward(rt2,tmp_source3);"},
clk(3){"wire [31:0] four32bit;
wire [3:0] flag;
wire  cin;
wire  cout;

<addr1,flag> = ALU1.add(source0,source2);
cin = '1';
four32bit = \"00000000000000000000000000000100\";
<addr2,cout> = ADDER2.adc(addr1,four32bit,cin);"},
clk(4){""},
clk(5){"wire [31:0] LE_source1;
wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire  addr_err;

byte0 = source1[31:24];
byte1 = source1[23:16];
byte2 = source1[15:8];
byte3 = source1[7:0];
LE_source1 = <byte3,byte2,byte1,byte0>;
addr_err = Dmem.s_32(addr1,LE_source1);"},
clk(6){"wire [31:0] LE_source3;
wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire  addr_err;

byte0 = source3[31:24];
byte1 = source3[23:16];
byte2 = source3[15:8];
byte3 = source3[7:0];
LE_source3 = <byte3,byte2,byte1,byte0>;
addr_err = Dmem.s_32(addr2,LE_source3);"}
}
,"DSZm"{variable{"wire [31:0] source2;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] addr2;
wire [31:0] tmp_pc;
wire [31:0] addr1;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [4:0] zero5;
wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

zero5 = \"00000\";
tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(zero5);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(zero5,tmp_source1);
source2 = EXT1.sign(imm);"},
clk(3){"wire [3:0] flag;

<addr1,flag> = ALU1.add(source0,source2);"},
clk(4){"wire [31:0] four32bit;
wire  cin;
wire  cout;

cin = '1';
four32bit = \"00000000000000000000000000000100\";
<addr2,cout> = ADDER2.adc(addr1,four32bit,cin);"},
clk(5){"wire  addr_err;

addr_err = Dmem.s_32(addr1,source1);"},
clk(6){"wire  addr_err;

addr_err = Dmem.s_32(addr2,source1);"}
}
,"SWLm"{variable{"wire [31:0] addr;
wire [31:0] source2;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source2 = EXT1.sign(imm);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source2);"},
clk(4){"wire [31:0] result0;
wire [31:0] target;
wire [31:0] nData;
wire [7:0] byte2;
wire [7:0] data1;
wire [31:0] result1;
wire [7:0] byte1;
wire [7:0] reg2;
wire [7:0] reg3;
wire [31:0] result3;
wire [7:0] reg1;
wire [31:0] result2;
wire [7:0] byte3;
wire [7:0] byte0;
wire [1:0] zero2;
wire [1:0] vAddr10;
wire  addr_err;
wire [7:0] data2;
wire [31:0] data;
wire [7:0] data3;
wire [29:0] addr_mask;

addr_mask = addr[31:2];
vAddr10 = addr[1:0];
zero2 = \"00\";
target = <addr_mask,zero2>;
<data,addr_err> = Dmem.ld_32(target);
byte0 = data[31:24];
byte1 = data[23:16];
byte2 = data[15:8];
byte3 = data[7:0];
nData = <byte3,byte2,byte1,byte0>;
data3 = nData[31:24];
data2 = nData[23:16];
data1 = nData[15:8];
reg3 = source1[31:24];
reg2 = source1[23:16];
reg1 = source1[15:8];
result3 = source1;
result2 = <data3,reg3,reg2,reg1>;
result1 = <data3,data2,reg3,reg2>;
result0 = <data3,data2,data1,reg3>;
result = MUXw32p4.sel(result0,result1,result2,result3,vAddr10);"},
clk(5){"wire [31:0] target;
wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire [1:0] zero2;
wire [31:0] nResult;
wire  addr_err;
wire [29:0] addr_mask;

addr_mask = addr[31:2];
zero2 = \"00\";
target = <addr_mask,zero2>;
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
nResult = <byte3,byte2,byte1,byte0>;
addr_err = Dmem.s_32(target,nResult);"},
clk(6){""}
}
,"SWRm"{variable{"wire [31:0] addr;
wire [31:0] source2;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source2 = EXT1.sign(imm);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source2);"},
clk(4){"wire [31:0] result0;
wire [31:0] target;
wire [31:0] nData;
wire [7:0] byte2;
wire [7:0] data1;
wire [31:0] result1;
wire [7:0] byte1;
wire [7:0] reg2;
wire [31:0] result3;
wire [7:0] reg0;
wire [7:0] reg1;
wire [31:0] result2;
wire [7:0] byte3;
wire [7:0] byte0;
wire [1:0] zero2;
wire [1:0] vAddr10;
wire  addr_err;
wire [7:0] data2;
wire [31:0] data;
wire [7:0] data0;
wire [29:0] addr_mask;

addr_mask = addr[31:2];
vAddr10 = addr[1:0];
zero2 = \"00\";
target = <addr_mask,zero2>;
<data,addr_err> = Dmem.ld_32(target);
byte0 = data[31:24];
byte1 = data[23:16];
byte2 = data[15:8];
byte3 = data[7:0];
nData = <byte3,byte2,byte1,byte0>;
data2 = nData[23:16];
data1 = nData[15:8];
data0 = nData[7:0];
reg2 = source1[23:16];
reg1 = source1[15:8];
reg0 = source1[7:0];
result0 = source1;
result1 = <reg2,reg1,reg0,data0>;
result2 = <reg1,reg0,data1,data0>;
result3 = <reg0,data2,data1,data0>;
result = MUXw32p4.sel(result0,result1,result2,result3,vAddr10);"},
clk(5){"wire [31:0] target;
wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire [1:0] zero2;
wire [31:0] nResult;
wire  addr_err;
wire [29:0] addr_mask;

addr_mask = addr[31:2];
zero2 = \"00\";
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
nResult = <byte3,byte2,byte1,byte0>;
target = <addr_mask,zero2>;
addr_err = Dmem.s_32(target,nResult);"},
clk(6){""}
}
,"LB_RRm"{variable{"wire [31:0] bigE_word;
wire [31:0] addr;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rd);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rd,tmp_source1);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire [31:0] result;
wire  addr_err;

<result,addr_err> = Dmem.ld_8(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3,byte2,byte1,byte0>;
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);"},
clk(6){"null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);"}
}
,"LBU_RRm"{variable{"wire [31:0] bigE_word;
wire [31:0] addr;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rd);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rd,tmp_source1);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire [31:0] result;
wire  addr_err;

<result,addr_err> = Dmem.ldu_8(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3,byte2,byte1,byte0>;
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);"},
clk(6){"null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);"}
}
,"LH_RRm"{variable{"wire [31:0] bigE_word;
wire [31:0] addr;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rd);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rd,tmp_source1);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire [31:0] result;
wire  addr_err;

<result,addr_err> = Dmem.ld_16(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3,byte2,byte1,byte0>;
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);"},
clk(6){"null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);"}
}
,"LHU_RRm"{variable{"wire [31:0] bigE_word;
wire [31:0] addr;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rd);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rd,tmp_source1);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire [31:0] result;
wire  addr_err;

<result,addr_err> = Dmem.ldu_16(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3,byte2,byte1,byte0>;
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);"},
clk(6){"null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);"}
}
,"LW_RRm"{variable{"wire [31:0] bigE_word;
wire [31:0] addr;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rd);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rd,tmp_source1);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source1);
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);"},
clk(4){"wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire [31:0] result;
wire  addr_err;

<result,addr_err> = Dmem.ld_32(addr);
byte0 = result[31:24];
byte1 = result[23:16];
byte2 = result[15:8];
byte3 = result[7:0];
bigE_word = <byte3,byte2,byte1,byte0>;
null = FWUL0.forward3(rt,bigE_word);
null = FWUL1.forward3(rt,bigE_word);
null = FWUL2.forward3(rt,bigE_word);
null = FWUL3.forward3(rt,bigE_word);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);"},
clk(5){"null = FWUL0.forward5(rt,bigE_word);
null = FWUL1.forward5(rt,bigE_word);
null = FWUL2.forward5(rt,bigE_word);
null = FWUL3.forward5(rt,bigE_word);"},
clk(6){"null = GPR.write0(rt,bigE_word);
null = FWUL0.forward7(rt,bigE_word);
null = FWUL1.forward7(rt,bigE_word);
null = FWUL2.forward7(rt,bigE_word);
null = FWUL3.forward7(rt,bigE_word);"}
}
,"DLW_RRm"{variable{"wire [31:0] bigE_word0;
wire [31:0] bigE_word1;
wire [4:0] nextRT;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] addr2;
wire [31:0] tmp_pc;
wire [31:0] addr1;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rd);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rd,tmp_source1);"},
clk(3){"wire [3:0] tmpRT;
wire [3:0] flag;
wire  one;

<addr1,flag> = ALU1.add(source0,source1);
one = '1';
tmpRT = rt[4:1];
nextRT = <tmpRT,one>;
null = FWUL0.lock1(rt);
null = FWUL1.lock1(rt);
null = FWUL2.lock1(rt);
null = FWUL3.lock1(rt);
null = FWUL0.lock2(nextRT);
null = FWUL1.lock2(nextRT);
null = FWUL2.lock2(nextRT);
null = FWUL3.lock2(nextRT);"},
clk(4){"wire [31:0] four32bit;
wire  cout;
wire [7:0] byte2;
wire [7:0] byte3;
wire  cin;
wire [7:0] byte1;
wire [31:0] result1;
wire  addr_err;
wire [7:0] byte0;

cin = '0';
four32bit = \"00000000000000000000000000000100\";
<result1,addr_err> = Dmem.ld_32(addr1);
byte0 = result1[31:24];
byte1 = result1[23:16];
byte2 = result1[15:8];
byte3 = result1[7:0];
bigE_word0 = <byte3,byte2,byte1,byte0>;
null = FWUL0.forward3(rt,bigE_word0);
null = FWUL1.forward3(rt,bigE_word0);
null = FWUL2.forward3(rt,bigE_word0);
null = FWUL3.forward3(rt,bigE_word0);
<addr2,cout> = ADDER2.adc(addr1,four32bit,cin);
null = FWUL0.lock3(rt);
null = FWUL1.lock3(rt);
null = FWUL2.lock3(rt);
null = FWUL3.lock3(rt);
null = FWUL0.lock4(nextRT);
null = FWUL1.lock4(nextRT);
null = FWUL2.lock4(nextRT);
null = FWUL3.lock4(nextRT);"},
clk(5){"wire [31:0] result2;
wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire  addr_err;

<result2,addr_err> = Dmem.ld_32(addr2);
byte0 = result2[31:24];
byte1 = result2[23:16];
byte2 = result2[15:8];
byte3 = result2[7:0];
bigE_word1 = <byte3,byte2,byte1,byte0>;
null = FWUL0.forward5(rt,bigE_word0);
null = FWUL1.forward5(rt,bigE_word0);
null = FWUL2.forward5(rt,bigE_word0);
null = FWUL3.forward5(rt,bigE_word0);
null = FWUL0.forward6(nextRT,bigE_word1);
null = FWUL1.forward6(nextRT,bigE_word1);
null = FWUL2.forward6(nextRT,bigE_word1);
null = FWUL3.forward6(nextRT,bigE_word1);
null = FWUL0.lock5(nextRT);
null = FWUL1.lock5(nextRT);
null = FWUL2.lock5(nextRT);
null = FWUL3.lock5(nextRT);"},
clk(6){"null = FWUL0.forward7(rt,bigE_word0);
null = FWUL1.forward7(rt,bigE_word0);
null = FWUL2.forward7(rt,bigE_word0);
null = FWUL3.forward7(rt,bigE_word0);
null = FWUL0.forward8(nextRT,bigE_word1);
null = FWUL1.forward8(nextRT,bigE_word1);
null = FWUL2.forward8(nextRT,bigE_word1);
null = FWUL3.forward8(nextRT,bigE_word1);
null = GPR.write0(rt,bigE_word0);
null = GPR.write1(nextRT,bigE_word1);"}
}
,"SB_RRm"{variable{"wire [31:0] addr;
wire [31:0] source2;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source2;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
tmp_source2 = GPR.read2(rd);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);
source2 = FWUL2.forward(rd,tmp_source2);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source2);"},
clk(4){""},
clk(5){"wire [31:0] LE_source1;
wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire  addr_err;

byte0 = source1[31:24];
byte1 = source1[23:16];
byte2 = source1[15:8];
byte3 = source1[7:0];
LE_source1 = <byte3,byte2,byte1,byte0>;
addr_err = Dmem.s_8(addr,LE_source1);"},
clk(6){""}
}
,"SH_RRm"{variable{"wire [31:0] addr;
wire [31:0] source2;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source2;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
tmp_source2 = GPR.read2(rd);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);
source2 = FWUL2.forward(rd,tmp_source2);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source2);"},
clk(4){""},
clk(5){"wire [31:0] LE_source1;
wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire  addr_err;

byte0 = source1[31:24];
byte1 = source1[23:16];
byte2 = source1[15:8];
byte3 = source1[7:0];
LE_source1 = <byte3,byte2,byte1,byte0>;
addr_err = Dmem.s_16(addr,LE_source1);"},
clk(6){""}
}
,"SW_RRm"{variable{"wire [31:0] addr;
wire [31:0] source2;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source2;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
tmp_source2 = GPR.read2(rd);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);
source2 = FWUL2.forward(rd,tmp_source2);"},
clk(3){"wire [3:0] flag;

<addr,flag> = ALU1.add(source0,source2);"},
clk(4){""},
clk(5){"wire [31:0] LE_source1;
wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire  addr_err;

byte0 = source1[31:24];
byte1 = source1[23:16];
byte2 = source1[15:8];
byte3 = source1[7:0];
LE_source1 = <byte3,byte2,byte1,byte0>;
addr_err = Dmem.s_32(addr,LE_source1);"},
clk(6){""}
}
,"DSW_RRm"{variable{"wire [31:0] source2;
wire [31:0] source3;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] addr2;
wire [31:0] tmp_pc;
wire [31:0] addr1;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;
wire [31:0] tmp_source2;
wire [31:0] tmp_source3;
wire  one;
wire [4:0] rt2;
wire [3:0] oldrt;

one = '1';
oldrt = rt[4:1];
rt2 = <oldrt,one>;
tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
tmp_source2 = GPR.read2(rd);
tmp_source3 = GPR.read3(rt2);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);
source2 = FWUL2.forward(rd,tmp_source2);
source3 = FWUL3.forward(rt2,tmp_source3);"},
clk(3){"wire [31:0] four32bit;
wire [3:0] flag;
wire  cin;
wire  cout;

<addr1,flag> = ALU1.add(source0,source2);
cin = '1';
four32bit = \"00000000000000000000000000000100\";
<addr2,cout> = ADDER2.adc(addr1,four32bit,cin);"},
clk(4){""},
clk(5){"wire [31:0] LE_source1;
wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire  addr_err;

byte0 = source1[31:24];
byte1 = source1[23:16];
byte2 = source1[15:8];
byte3 = source1[7:0];
LE_source1 = <byte3,byte2,byte1,byte0>;
addr_err = Dmem.s_32(addr1,LE_source1);"},
clk(6){"wire [31:0] LE_source3;
wire [7:0] byte3;
wire [7:0] byte2;
wire [7:0] byte1;
wire [7:0] byte0;
wire  addr_err;

byte0 = source3[31:24];
byte1 = source3[23:16];
byte2 = source3[15:8];
byte3 = source3[7:0];
LE_source3 = <byte3,byte2,byte1,byte0>;
addr_err = Dmem.s_32(addr2,LE_source3);"}
}
,"DSZ_RRm"{variable{"wire [31:0] source2;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] addr2;
wire [31:0] tmp_pc;
wire [31:0] addr1;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [4:0] zero5;
wire [31:0] tmp_source0;
wire [31:0] tmp_source2;
wire [31:0] tmp_source1;

zero5 = \"00000\";
tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(zero5);
tmp_source2 = GPR.read2(rd);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(zero5,tmp_source1);
source2 = FWUL2.forward(rd,tmp_source2);"},
clk(3){"wire [3:0] flag;

<addr1,flag> = ALU1.add(source0,source2);"},
clk(4){"wire [31:0] four32bit;
wire  cin;
wire  cout;

cin = '1';
four32bit = \"00000000000000000000000000000100\";
<addr2,cout> = ADDER2.adc(addr1,four32bit,cin);"},
clk(5){"wire  addr_err;

addr_err = Dmem.s_32(addr1,source1);"},
clk(6){"wire  addr_err;

addr_err = Dmem.s_32(addr2,source1);"}
}
,"JUMPm"{variable{"wire [31:0] tmp_pc;
wire [31:0] result;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire  one1b0;
wire [1:0] const;
wire  zero1b0;
wire [3:0] cpc_top;
wire [31:0] tmp_cpc;

one1b0 = '1';
zero1b0 = '0';
const = \"00\";
tmp_cpc = CPC.read();
cpc_top = tmp_cpc[31:28];
result = <cpc_top,targ,const>;"},
clk(3){"null = CPC.write(result);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"JALm"{variable{"wire [4:0] linkReg;
wire [31:0] tmp_pc;
wire [31:0] link;
wire [31:0] result;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [3:0] cpc_top;
wire [1:0] const;
wire [31:0] tmp_cpc;

const = \"00\";
tmp_cpc = CPC.read();
link = tmp_cpc;
cpc_top = tmp_cpc[31:28];
result = <cpc_top,targ,const>;
linkReg = \"11111\";"},
clk(3){"null = CPC.write(result);
null = FWUL0.forward1(linkReg,link);
null = FWUL1.forward1(linkReg,link);
null = FWUL2.forward1(linkReg,link);
null = FWUL3.forward1(linkReg,link);"},
clk(4){"null = FWUL0.forward3(linkReg,link);
null = FWUL1.forward3(linkReg,link);
null = FWUL2.forward3(linkReg,link);
null = FWUL3.forward3(linkReg,link);"},
clk(5){"null = FWUL0.forward5(linkReg,link);
null = FWUL1.forward5(linkReg,link);
null = FWUL2.forward5(linkReg,link);
null = FWUL3.forward5(linkReg,link);"},
clk(6){"null = GPR.write0(linkReg,link);
null = FWUL0.forward7(linkReg,link);
null = FWUL1.forward7(linkReg,link);
null = FWUL2.forward7(linkReg,link);
null = FWUL3.forward7(linkReg,link);"}
}
,"JRm"{variable{"wire [31:0] target;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source;

tmp_source = GPR.read0(rs);
target = FWUL0.forward(rs,tmp_source);"},
clk(3){"null = CPC.write(target);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"JALRm"{variable{"wire [31:0] target;
wire [4:0] linkReg;
wire [31:0] tmp_pc;
wire [31:0] link;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source;

link = CPC.read();
tmp_source = GPR.read0(rs);
target = FWUL0.forward(rs,tmp_source);"},
clk(3){"null = CPC.write(target);
linkReg = \"11111\";
null = FWUL0.forward1(linkReg,link);
null = FWUL1.forward1(linkReg,link);
null = FWUL2.forward1(linkReg,link);
null = FWUL3.forward1(linkReg,link);"},
clk(4){"null = FWUL0.forward3(linkReg,link);
null = FWUL1.forward3(linkReg,link);
null = FWUL2.forward3(linkReg,link);
null = FWUL3.forward3(linkReg,link);"},
clk(5){"null = FWUL0.forward5(linkReg,link);
null = FWUL1.forward5(linkReg,link);
null = FWUL2.forward5(linkReg,link);
null = FWUL3.forward5(linkReg,link);"},
clk(6){"null = GPR.write0(linkReg,link);
null = FWUL0.forward7(linkReg,link);
null = FWUL1.forward7(linkReg,link);
null = FWUL2.forward7(linkReg,link);
null = FWUL3.forward7(linkReg,link);"}
}
,"BEQm"{variable{"wire [31:0] target;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [29:0] tmp;
wire [31:0] tmp_source0;
wire  cout;
wire  cin;
wire [31:0] tmp_source1;
wire [31:0] ext_imm;
wire [1:0] zero2;
wire [31:0] offset;
wire [31:0] tmp_cpc;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);
cin = '0';
zero2 = \"00\";
ext_imm = EXT1.sign(imm);
tmp = ext_imm[29:0];
offset = <tmp,zero2>;
tmp_cpc = CPC.read();
<target,cout> = ADD1.adc(tmp_cpc,offset,cin);"},
clk(3){"wire  zero;
wire  cond;
wire [3:0] flag;

flag = ALU1.cmp(source0,source1);
zero = flag[2];
cond = zero =='1';
null = [cond]CPC.write(target);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"BNEm"{variable{"wire [31:0] target;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [29:0] tmp;
wire [31:0] tmp_source0;
wire  cout;
wire  cin;
wire [31:0] tmp_source1;
wire [31:0] ext_imm;
wire [1:0] zero2;
wire [31:0] offset;
wire [31:0] tmp_cpc;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);
cin = '0';
zero2 = \"00\";
ext_imm = EXT1.sign(imm);
tmp = ext_imm[29:0];
offset = <tmp,zero2>;
tmp_cpc = CPC.read();
<target,cout> = ADD1.adc(tmp_cpc,offset,cin);"},
clk(3){"wire  zero;
wire  cond;
wire [3:0] flag;

flag = ALU1.cmp(source0,source1);
zero = flag[2];
cond = zero != '1';
null = [cond]CPC.write(target);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"BLEZm"{variable{"wire [31:0] target;
wire [31:0] source0;
wire [31:0] src0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [29:0] tmp;
wire [31:0] tmp_source0;
wire  cout;
wire  cin;
wire [31:0] ext_imm;
wire [31:0] offset;
wire [31:0] tmp_cpc;
wire [1:0] zero2;

tmp_source0 = GPR.read0(rs);
src0 = FWU0.forward(rs,tmp_source0);
cin = '0';
zero2 = \"00\";
ext_imm = EXT1.sign(imm);
tmp = ext_imm[29:0];
offset = <tmp,zero2>;
tmp_cpc = CPC.read();
<target,cout> = ADD1.adc(tmp_cpc,offset,cin);"},
clk(3){"wire  cond_tmp;
wire  Z;
wire  cond;
wire [3:0] flag;
wire  N;

flag = ALU1.cmpz(src0);
N = flag[1];
Z = flag[2];
cond_tmp = N|Z;
cond = cond_tmp == '1';
null = [cond]CPC.write(target);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"BGTZm"{variable{"wire [31:0] target;
wire [31:0] source0;
wire [31:0] src0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [29:0] tmp;
wire [31:0] tmp_source0;
wire  cout;
wire  cin;
wire [31:0] ext_imm;
wire [31:0] offset;
wire [31:0] tmp_cpc;
wire [1:0] zero2;

tmp_source0 = GPR.read0(rs);
src0 = FWU0.forward(rs,tmp_source0);
cin = '0';
zero2 = \"00\";
ext_imm = EXT1.sign(imm);
tmp = ext_imm[29:0];
offset = <tmp,zero2>;
tmp_cpc = CPC.read();
<target,cout> = ADD1.adc(tmp_cpc,offset,cin);"},
clk(3){"wire  cond_tmp;
wire  Z;
wire  cond;
wire [3:0] flag;
wire  N;

flag = ALU1.cmpz(src0);
N = flag[1];
Z = flag[2];
cond_tmp = N|Z;
cond = cond_tmp != '1';
null = [cond]CPC.write(target);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"BLTZm"{variable{"wire [31:0] target;
wire [31:0] source0;
wire [31:0] src0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [29:0] tmp;
wire [31:0] tmp_source0;
wire  cout;
wire  cin;
wire [31:0] ext_imm;
wire [31:0] offset;
wire [31:0] tmp_cpc;
wire [1:0] zero2;

tmp_source0 = GPR.read0(rs);
src0 = FWU0.forward(rs,tmp_source0);
cin = '0';
zero2 = \"00\";
ext_imm = EXT1.sign(imm);
tmp = ext_imm[29:0];
offset = <tmp,zero2>;
tmp_cpc = CPC.read();
<target,cout> = ADD1.adc(tmp_cpc,offset,cin);"},
clk(3){"wire [3:0] flag;
wire  cond;
wire  N;

flag = ALU1.cmpz(src0);
N = flag[1];
cond = N == '1';
null = [cond]CPC.write(target);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"BGEZm"{variable{"wire [31:0] target;
wire [31:0] source0;
wire [31:0] src0;
wire [31:0] source1;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [29:0] tmp;
wire [31:0] tmp_source0;
wire  cout;
wire  cin;
wire [31:0] ext_imm;
wire [31:0] offset;
wire [31:0] tmp_cpc;
wire [1:0] zero2;

tmp_source0 = GPR.read0(rs);
src0 = FWU0.forward(rs,tmp_source0);
cin = '0';
zero2 = \"00\";
ext_imm = EXT1.sign(imm);
tmp = ext_imm[29:0];
offset = <tmp,zero2>;
tmp_cpc = CPC.read();
<target,cout> = ADD1.adc(tmp_cpc,offset,cin);"},
clk(3){"wire [3:0] flag;
wire  cond;
wire  N;

flag = ALU1.cmpz(src0);
N = flag[1];
cond = N != '1';
null = [cond]CPC.write(target);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"ADDm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.add(source0,source1);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"ADDIm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.add(source0,source1);
null = FWUL0.forward1(rt,result);
null = FWUL1.forward1(rt,result);
null = FWUL2.forward1(rt,result);
null = FWUL3.forward1(rt,result);"},
clk(4){"null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"ADDUm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.addu(source0,source1);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"},
clk(5){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"ADDIUm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.addu(source0,source1);
null = FWUL0.forward1(rt,result);
null = FWUL1.forward1(rt,result);
null = FWUL2.forward1(rt,result);
null = FWUL3.forward1(rt,result);"},
clk(4){"null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"SUBm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.sub(source0,source1);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SUBUm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.subu(source0,source1);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"MULTm"{variable{"wire [31:0] resulthi;
wire [31:0] source0;
wire [31:0] source1;
wire [63:0] result;
wire [31:0] tmp_pc;
wire [31:0] resultlo;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"result = MUL1.mul(source0,source1);
resulthi = result[63:32];
resultlo = result[31:0];
null = LO.write(resultlo);
null = HI.write(resulthi);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"MULTUm"{variable{"wire [31:0] resulthi;
wire [31:0] source0;
wire [31:0] source1;
wire [63:0] result;
wire [31:0] tmp_pc;
wire [31:0] resultlo;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"result = MUL1.mulu(source0,source1);
resulthi = result[63:32];
resultlo = result[31:0];
null = LO.write(resultlo);
null = HI.write(resulthi);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"DIVm"{variable{"wire [31:0] resulthi;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;
wire [31:0] resultlo;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire  flag;

<resultlo,resulthi,flag> = DIV1.div(source0,source1);
null = LO.write(resultlo);
null = HI.write(resulthi);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"DIVUm"{variable{"wire [31:0] resulthi;
wire [31:0] source0;
wire [31:0] source1;
wire [31:0] tmp_pc;
wire [31:0] resultlo;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire  flag;

<resultlo,resulthi,flag> = DIV1.divu(source0,source1);
null = LO.write(resultlo);
null = HI.write(resulthi);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"MFHIm"{variable{"wire [31:0] tmp_pc;
wire [31:0] result;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire  one1b0;
wire  zero1b;

one1b0 = '1';
zero1b = '0';
result = HI.read();"},
clk(3){"null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"MTHIm"{variable{"wire [31:0] source0;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);"},
clk(3){"null = HI.write(source0);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"MFLOm"{variable{"wire [31:0] tmp_pc;
wire [31:0] result;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire  one1b0;
wire  zero1b;

one1b0 = '1';
zero1b = '0';
result = LO.read();"},
clk(3){"null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"MTLOm"{variable{"wire [31:0] source0;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);"},
clk(3){"null = LO.write(source0);"},
clk(4){""},
clk(5){""},
clk(6){""}
}
,"ANDm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.and(source0,source1);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"ANDIm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.zero(imm);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.and(source0,source1);
null = FWUL0.forward1(rt,result);
null = FWUL1.forward1(rt,result);
null = FWUL2.forward1(rt,result);
null = FWUL3.forward1(rt,result);"},
clk(4){"null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"ORm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.or(source0,source1);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"ORIm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.zero(imm);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.or(source0,source1);
null = FWUL0.forward1(rt,result);
null = FWUL1.forward1(rt,result);
null = FWUL2.forward1(rt,result);
null = FWUL3.forward1(rt,result);"},
clk(4){"null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"XORm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.xor(source0,source1);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"XORIm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.zero(imm);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.xor(source0,source1);
null = FWUL0.forward1(rt,result);
null = FWUL1.forward1(rt,result);
null = FWUL2.forward1(rt,result);
null = FWUL3.forward1(rt,result);"},
clk(4){"null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"NORm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [3:0] flag;

<result,flag> = ALU1.nor(source0,source1);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SLLm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [23:0] zero24;
wire [31:0] tmp_source0;

zero24 = \"000000000000000000000000\";
tmp_source0 = GPR.read0(rt);
source0 = FWUL0.forward(rt,tmp_source0);
source1 = <zero24,shamt>;"},
clk(3){"wire [4:0] shift;

shift = source1[4:0];
result = SFT1.sll(source0,shift);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SLLVm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [4:0] shift;

shift = source0[4:0];
result = SFT1.sll(source1,shift);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SRLm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [23:0] zero24;
wire [31:0] tmp_source0;

zero24 = \"000000000000000000000000\";
tmp_source0 = GPR.read0(rt);
source0 = FWUL0.forward(rt,tmp_source0);
source1 = <zero24,shamt>;"},
clk(3){"wire [4:0] shift;

shift = source1[4:0];
result = SFT1.srl(source0,shift);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SRLVm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [4:0] shift;

shift = source0[4:0];
result = SFT1.srl(source1,shift);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SRAm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [23:0] zero24;
wire [31:0] tmp_source0;

zero24 = \"000000000000000000000000\";
tmp_source0 = GPR.read0(rt);
source0 = FWUL0.forward(rt,tmp_source0);
source1 = <zero24,shamt>;"},
clk(3){"wire [4:0] shift;

shift = source1[4:0];
result = SFT1.sra(source0,shift);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SRAVm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [4:0] shift;

shift = source0[4:0];
result = SFT1.sra(source1,shift);
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SLTm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [30:0] zero31;
wire  VnN;
wire [3:0] flag;
wire  cond;
wire [1:0] flag2;
wire  NnV;

zero31 = \"0000000000000000000000000000000\";
flag = ALU1.cmp(source0,source1);
flag2 = flag[1:0];
NnV = flag2==\"10\";
VnN = flag ==\"1001\";
cond = NnV | VnN;
result = <zero31,cond>;
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SLTUm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;
wire [31:0] tmp_source1;

tmp_source0 = GPR.read0(rs);
tmp_source1 = GPR.read1(rt);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = FWUL1.forward(rt,tmp_source1);"},
clk(3){"wire [30:0] zero31;
wire [3:0] flag;
wire  cond;
wire [1:0] flag2;

zero31 = \"0000000000000000000000000000000\";
flag = ALU1.cmpu(source0,source1);
flag2 = flag[3:2];
cond = flag2 == \"00\";
result = <zero31,cond>;
null = FWUL0.forward1(rd,result);
null = FWUL1.forward1(rd,result);
null = FWUL2.forward1(rd,result);
null = FWUL3.forward1(rd,result);"},
clk(4){"null = FWUL0.forward3(rd,result);
null = FWUL1.forward3(rd,result);
null = FWUL2.forward3(rd,result);
null = FWUL3.forward3(rd,result);"},
clk(5){"null = FWUL0.forward5(rd,result);
null = FWUL1.forward5(rd,result);
null = FWUL2.forward5(rd,result);
null = FWUL3.forward5(rd,result);"},
clk(6){"null = GPR.write0(rd,result);
null = FWUL0.forward7(rd,result);
null = FWUL1.forward7(rd,result);
null = FWUL2.forward7(rd,result);
null = FWUL3.forward7(rd,result);"}
}
,"SLTIUm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.zero(imm);"},
clk(3){"wire [30:0] zero31;
wire [3:0] flag;
wire  cond;
wire [1:0] flag2;

zero31 = \"0000000000000000000000000000000\";
flag = ALU1.cmpu(source0,source1);
flag2 = flag[3:2];
cond = flag2 == \"00\";
result = <zero31,cond>;
null = FWUL0.forward1(rt,result);
null = FWUL1.forward1(rt,result);
null = FWUL2.forward1(rt,result);
null = FWUL3.forward1(rt,result);"},
clk(4){"null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"LUIm"{variable{"wire [31:0] tmp_pc;
wire [31:0] result;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [15:0] zero16;

zero16 = \"0000000000000000\";
result = <imm,zero16>;"},
clk(3){"null = FWUL0.forward1(rt,result);
null = FWUL1.forward1(rt,result);
null = FWUL2.forward1(rt,result);
null = FWUL3.forward1(rt,result);"},
clk(4){"null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
,"SLTIm"{variable{"wire [31:0] source0;
wire [31:0] source1;
wire [31:0] result;
wire [31:0] tmp_pc;"},clk(1){"wire [31:0] current_pc;
wire [63:0] inst0;
wire  iramaddr_err;

current_pc = CPC.read();
tmp_pc = current_pc;
<inst0,iramaddr_err> = Imem.ld_64(current_pc);
null = IReg.write(inst0);
null = CPC.inc();"},
clk(2){"wire [31:0] tmp_source0;

tmp_source0 = GPR.read0(rs);
source0 = FWUL0.forward(rs,tmp_source0);
source1 = EXT1.sign(imm);"},
clk(3){"wire [30:0] zero31;
wire  VnN;
wire [3:0] flag;
wire  cond;
wire [1:0] flag2;
wire  NnV;

zero31 = \"0000000000000000000000000000000\";
flag = ALU1.cmp(source0,source1);
flag2 = flag[1:0];
NnV = flag2 == \"10\";
VnN = flag == \"1001\";
cond = NnV | VnN;
result = <zero31,cond>;
null = FWUL0.forward1(rt,result);
null = FWUL1.forward1(rt,result);
null = FWUL2.forward1(rt,result);
null = FWUL3.forward1(rt,result);"},
clk(4){"null = FWUL0.forward3(rt,result);
null = FWUL1.forward3(rt,result);
null = FWUL2.forward3(rt,result);
null = FWUL3.forward3(rt,result);"},
clk(5){"null = FWUL0.forward5(rt,result);
null = FWUL1.forward5(rt,result);
null = FWUL2.forward5(rt,result);
null = FWUL3.forward5(rt,result);"},
clk(6){"null = GPR.write0(rt,result);
null = FWUL0.forward7(rt,result);
null = FWUL1.forward7(rt,result);
null = FWUL2.forward7(rt,result);
null = FWUL3.forward7(rt,result);"}
}
}}

}
