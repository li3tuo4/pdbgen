--
-- Copyright (C) 2008 ASIP Solutions, Inc. All rights reserved. 
-- Generated by ASIP Meister 2.3 on 2014/09/16 14:10:53 
--
-- Module    : W-bit N-bit address forwarding unit with lock mechanism
-- Feature   : W = 4 8 16 24 32, N = 1 2 3 4 5 6 7 8 12 16 24 32
-- Reference : Designed by M.Itoh (c) 2000
-- Author    : Implemented by Y.Kobayashi (c) 2004
--           : Extended by T.Yoshimura (c) 2004
-- Version   : 1.0:
--             2.0: Add lock_num port (T.Yoshimura, Oct. 19, 2004)

-- Functionality : netlist level
-- port
--  data0     : input data from storage unit
--  data1     : forwarding data from operand fetch stage + 1
--  data2     : forwarding data from operand fetch stage + 2
--  data3     : forwarding data from operand fetch stage + 3
--  data4     : forwarding data from operand fetch stage + 4
--  data5     : forwarding data from operand fetch stage + 5
--  data6     : forwarding data from operand fetch stage + 6
--  data7     : forwarding data from operand fetch stage + 7
--  data8     : forwarding data from operand fetch stage + 8
--  num1      : address of forwarding data for stage OF + 1
--  num2      : address of forwarding data for stage OF + 2
--  num3      : address of forwarding data for stage OF + 3
--  num4      : address of forwarding data for stage OF + 4
--  num5      : address of forwarding data for stage OF + 5
--  num6      : address of forwarding data for stage OF + 6
--  num7      : address of forwarding data for stage OF + 7
--  num8      : address of forwarding data for stage OF + 8
--  lock_num1 : address to lock for stage OF + 1
--  lock_num2 : address to lock for stage OF + 2
--  lock_num3 : address to lock for stage OF + 3
--  lock_num4 : address to lock for stage OF + 4
--  lock_num5 : address to lock for stage OF + 5
--  lock_num6 : address to lock for stage OF + 6
--  fw1       : valid flag for stage OF + 1
--  fw2       : valid flag for stage OF + 2
--  fw3       : valid flag for stage OF + 3
--  fw4       : valid flag for stage OF + 4
--  fw5       : valid flag for stage OF + 5
--  fw6       : valid flag for stage OF + 6
--  fw7       : valid flag for stage OF + 7
--  fw8       : valid flag for stage OF + 8
--  lock1     : lock flag for stage OF + 1
--  lock2     : lock flag for stage OF + 2
--  lock3     : lock flag for stage OF + 3
--  lock4     : lock flag for stage OF + 4
--  lock5     : lock flag for stage OF + 5
--  lock6     : lock flag for stage OF + 6
--  data_out  : operand
--  lock      : lock signal
--  dummy_start  : dummy signal for multi-cycle-protocol
--  dummy_cancel : dummy signal for multi-cycle-protocol
-- Comment   :
library IEEE;
use IEEE.std_logic_1164.all;


entity fhm_fwu_lock_w32 is

  generic (
    W : integer := 32;                  -- bit_width
    N : integer := 5);                  -- address_bit_width

  port (
    data0     : in  std_logic_vector(W-1 downto 0);  -- operand
    data1     : in  std_logic_vector(W-1 downto 0); -- forwarding data
    data2     : in  std_logic_vector(W-1 downto 0); -- forwarding data
    data3     : in  std_logic_vector(W-1 downto 0); -- forwarding data
    data4     : in  std_logic_vector(W-1 downto 0); -- forwarding data
    data5     : in  std_logic_vector(W-1 downto 0); -- forwarding data
    data6     : in  std_logic_vector(W-1 downto 0); -- forwarding data
    data7     : in  std_logic_vector(W-1 downto 0); -- forwarding data
    data8     : in  std_logic_vector(W-1 downto 0); -- forwarding data
    num0 : in std_logic_vector(N-1 downto 0); -- op_num for data0
    num1 : in std_logic_vector(N-1 downto 0); -- op_num for data0
    num2 : in std_logic_vector(N-1 downto 0); -- op_num for data0
    num3 : in std_logic_vector(N-1 downto 0); -- op_num for data0
    num4 : in std_logic_vector(N-1 downto 0); -- op_num for data0
    num5 : in std_logic_vector(N-1 downto 0); -- op_num for data0
    num6 : in std_logic_vector(N-1 downto 0); -- op_num for data0
    num7 : in std_logic_vector(N-1 downto 0); -- op_num for data0
    num8 : in std_logic_vector(N-1 downto 0); -- op_num for data0
    locknum1  : in  std_logic_vector(N-1 downto 0); -- op_num for lock
    locknum2  : in  std_logic_vector(N-1 downto 0); -- op_num for lock
    locknum3  : in  std_logic_vector(N-1 downto 0); -- op_num for lock
    locknum4  : in  std_logic_vector(N-1 downto 0); -- op_num for lock
    locknum5  : in  std_logic_vector(N-1 downto 0); -- op_num for lock
    locknum6  : in  std_logic_vector(N-1 downto 0); -- op_num for lock
    fw1 : in std_logic; -- data1 is not null
    fw2 : in std_logic; -- data2 is not null
    fw3 : in std_logic; -- data3 is not null
    fw4 : in std_logic; -- data4 is not null
    fw5 : in std_logic; -- data5 is not null
    fw6 : in std_logic; -- data6 is not null
    fw7 : in std_logic; -- data7 is not null
    fw8 : in std_logic; -- data8 is not null
    lock1     : in  std_logic; -- num1 is locked
    lock2     : in  std_logic; -- num2 is locked
    lock3     : in  std_logic; -- num3 is locked
    lock4     : in  std_logic; -- num4 is locked
    lock5     : in  std_logic; -- num5 is locked
    lock6     : in  std_logic; -- num6 is locked
    data_out  : out std_logic_vector(W-1 downto 0);  -- operand output
    lock : out std_logic; -- lock signal output
    dummy_start  : in  std_logic;                   -- dummy signal
    dummy_cancel : in  std_logic );                 -- dummy signal

end fhm_fwu_lock_w32;


architecture netlist of fhm_fwu_lock_w32 is
  
begin  -- netlist

  data_out <=
              data1 when (fw1 = '1') and (num0 = num1) else
              data2 when (fw2 = '1') and (num0 = num2) else
              data3 when (fw3 = '1') and (num0 = num3) else
              data4 when (fw4 = '1') and (num0 = num4) else
              data5 when (fw5 = '1') and (num0 = num5) else
              data6 when (fw6 = '1') and (num0 = num6) else
              data7 when (fw7 = '1') and (num0 = num7) else
              data8 when (fw8 = '1') and (num0 = num8) else
              data0;

  lock     <= '0' when ( (lock1 = '1') and (num0 = locknum1) )
                    or ( (lock2 = '1') and (num0 = locknum2) )
                    or ( (lock3 = '1') and (num0 = locknum3) )
                    or ( (lock4 = '1') and (num0 = locknum4) )
                    or ( (lock5 = '1') and (num0 = locknum5) )
                    or ( (lock6 = '1') and (num0 = locknum6) )
              else '1';

end netlist;

-----------------------------------------
-- Generated by ASIP Meister ver.2.3.2 --
-----------------------------------------
